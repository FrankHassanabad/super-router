[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/App.js",
    "memberof": null,
    "longname": "lib/App.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _        = require('lodash');\nconst Route    = require('./Route');\nconst Request  = require('./Request');\nconst Response = require('./Response');\nconst Q        = require('q');\n\n/**\n * SuperRouter app object. Builds a middleware stack.\n */\nclass App {\n  constructor() {\n    this._middleware      = [];\n  }\n\n  /**\n   * Adds a middleware route as a 'then'.\n   *\n   * @param {Route|Function} route - The middleware route. If a function is provided, it will be\n   *  used as the handler. If a plain object is provided, it will be run through the Route constructor.\n   * @returns {App} - app instance for chaining\n   */\n  then(route) {\n    return this._addMiddleware(route, 'then');\n  }\n\n  /**\n   * Adds a middleware route as a 'catch'.\n   *\n   * @param {Route|Function} route - The middleware route. If a function is provided, it will be\n   *  used as the handler. If a plain object is provided, it will be run through the Route constructor.\n   * @returns {App} - app instance for chaining\n   */\n  catch(route) {\n\n    return this._addMiddleware(route, 'catch' );\n  }\n\n  /**\n   * Adds a middleware route. These routes are processed in order, and the catches will only be\n   * invoked if the previous middleware has thrown or rejected with an error. They are invoked with\n   * the request, response, and possibly previous error. If just a function is provided, it is used as the\n   * middleware handler.\n   *\n   * If the middleware returns a promise, the app will wait for that promise to resolve or reject before\n   * moving to the next middleware in the stack.\n   *\n   * An error handler can be supplied in case there is an error. This allows more complicated error\n   * handling to fail but something to still be executed.\n   *\n   * @example\n   * app.catch({\n   *  path : '/a/b',\n   *  methods : 'get',\n   *  handler : ({request, response, error}) => {\n   *    //...\n   *  }\n   * });\n   *\n   * app.catch({\n   *  path : '/a/b',\n   *  methods : 'get',\n   *  handler : ({request, response, error}) => {\n   *    //...\n   *  },\n   *  errorHandler : ({request, response, error}) => {\n   *    //...\n   *  }\n   * });\n   *\n   * app.catch(({request, response, error}) => {\n   *    //...\n   * });\n   *\n   * @param {Route|Function} route - The middleware route. If a function is provided, it will be\n   *  used as the handler. If a plain object is provided, it will be run through the Route constructor.\n   * @param {String} method - whether the supplied route should be used as a then or a catch\n   * @returns {App} - app instance for chaining\n   */\n  _addMiddleware(route, method) {\n    if (_.isFunction(route)) {\n      route = { handler : route };\n    }\n    if (!(route instanceof Route)) {\n      route = new Route(route);\n    }\n\n    this._middleware.push({ route, method });\n    return this;\n  }\n\n  /**\n   * Process a request through the middleware stack. Evaluates the request against each middleware and error\n   * middleware as appropriate. Resolves to a Response object. If the promise chain ends in a rejection,\n   * will reject with the last error thrown.\n   *\n   * @param {Request} request - The input request\n   * @returns {Promise<Response>} - A promise for a valid response object.\n   */\n  processRequest(request) {\n    if (!(request instanceof Request)) {\n      request = new Request(request);\n    }\n\n    let promise    = Q();\n    const response = new Response();\n    _.each(this._middleware, (middleware) => {\n      const route = middleware.route;\n      const method = middleware.method;\n\n      if ( method === 'then' ) {\n        promise = promise.then(() => {\n          if (!response.ended) {\n            return route.execute({ request, response });\n          }\n        });\n      }\n      else {\n        if (!route.isMatch(request)) {\n          return;\n        }\n        promise = promise.catch((error) => {\n          if (!response.ended) {\n            return route.execute({ request, response, error });\n          }\n        });\n      }\n    });\n\n    return promise.then(() => {\n      return response;\n    });\n  }\n}\n\nmodule.exports = App;\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Route",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~Route",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Request",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~Request",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Response",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~Response",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Q",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~Q",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "App",
    "memberof": "lib/App.js",
    "longname": "lib/App.js~App",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/App.js",
    "importStyle": null,
    "description": "SuperRouter app object. Builds a middleware stack.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 7,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#constructor",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_middleware",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#_middleware",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "then",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#then",
    "access": null,
    "description": "Adds a middleware route as a 'then'.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{App} - app instance for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The middleware route. If a function is provided, it will be\n used as the handler. If a plain object is provided, it will be run through the Route constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "App"
      ],
      "spread": false,
      "description": "app instance for chaining"
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "catch",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#catch",
    "access": null,
    "description": "Adds a middleware route as a 'catch'.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{App} - app instance for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The middleware route. If a function is provided, it will be\n used as the handler. If a plain object is provided, it will be run through the Route constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "App"
      ],
      "spread": false,
      "description": "app instance for chaining"
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addMiddleware",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#_addMiddleware",
    "access": null,
    "description": "Adds a middleware route. These routes are processed in order, and the catches will only be\ninvoked if the previous middleware has thrown or rejected with an error. They are invoked with\nthe request, response, and possibly previous error. If just a function is provided, it is used as the\nmiddleware handler.\n\nIf the middleware returns a promise, the app will wait for that promise to resolve or reject before\nmoving to the next middleware in the stack.\n\nAn error handler can be supplied in case there is an error. This allows more complicated error\nhandling to fail but something to still be executed.",
    "examples": [
      "app.catch({\n path : '/a/b',\n methods : 'get',\n handler : ({request, response, error}) => {\n   //...\n }\n});\n\napp.catch({\n path : '/a/b',\n methods : 'get',\n handler : ({request, response, error}) => {\n   //...\n },\n errorHandler : ({request, response, error}) => {\n   //...\n }\n});\n\napp.catch(({request, response, error}) => {\n   //...\n});"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{App} - app instance for chaining"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The middleware route. If a function is provided, it will be\n used as the handler. If a plain object is provided, it will be run through the Route constructor."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "whether the supplied route should be used as a then or a catch"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "App"
      ],
      "spread": false,
      "description": "app instance for chaining"
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "processRequest",
    "memberof": "lib/App.js~App",
    "longname": "lib/App.js~App#processRequest",
    "access": null,
    "description": "Process a request through the middleware stack. Evaluates the request against each middleware and error\nmiddleware as appropriate. Resolves to a Response object. If the promise chain ends in a rejection,\nwill reject with the last error thrown.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Response>} - A promise for a valid response object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "The input request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Response>"
      ],
      "spread": false,
      "description": "A promise for a valid response object."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/METHODS.js",
    "memberof": null,
    "longname": "lib/METHODS.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * Supported super-router request methods.\n */\nmodule.exports = {\n  GET     : 'GET',\n  PUT     : 'PUT',\n  POST    : 'POST',\n  PATCH   : 'PATCH',\n  DELETE  : 'DELETE',\n  HEAD    : 'HEAD',\n  OPTIONS : 'OPTIONS',\n  ALL     : '*'\n};\n"
  },
  {
    "__docId__": 14,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Node.js",
    "memberof": null,
    "longname": "lib/Node.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _           = require('lodash');\nconst utils       = require('./utils');\nconst Route       = require('./Route');\nconst METHODS     = require('./METHODS');\nconst RouteParser = require('route-parser');\n\n/**\n * Router Node.\n * Represents a unique path on the router. Each node may contain one route per method, and any number of child nodes.\n * Nodes build a linked tree structure, representing each unique route on the router. It is used to serve OPTIONS\n * requests.\n */\nclass Node {\n\n  /**\n   * Node constructor.\n   *\n   * Creating a node automatically registers the OPTIONS request on this path.\n   *\n   * @param {Object} options - The input options\n   * @param {String} options.path - The path pattern the node represents\n   * @returns {Node} - The Node instance\n   */\n  constructor(options) {\n    if (!_.isObject(options)) {\n      throw new TypeError('options must be an object.');\n    }\n    if (!_.isString(options.path)) {\n      throw new TypeError('path must be a string.');\n    }\n    if (!/^\\//.test(options.path)) {\n      throw new TypeError('path must start with a / character.');\n    }\n\n    this._path     = utils.normalizePath(options.path);\n    this._parsed   = new RouteParser(this._path);\n    this._routes   = new Map();\n    this._children = new Map();\n\n    this.addRoute({\n      path    : this.path,\n      methods : METHODS.OPTIONS,\n      handler : (options) => {\n        const response = options.response;\n\n        response.setBody(this.toObject());\n      }\n    });\n  }\n\n  /**\n   * Gets the path pattern that the node represents.\n   *\n   * @returns {String} - The path\n   */\n  get path() {\n    return this._path;\n  }\n\n  /**\n   * Parses the given path string against this node's path pattern. If the input path is a match, returns\n   * an object whose key value pairs are the matched route params and their values. If the path is not a match,\n   * returns false.\n   *\n   * @param {String} path - The input path\n   * @returns {Boolean|Object} - False if the path is not a match, an object if it is.\n   * @private\n   */\n  _parsePath(path) {\n    return this._parsed.match(path);\n  }\n\n  /**\n   * Adds a route to the node. Will throw an error if the route does not match the path of the node, if there is\n   * already a route registered on the given method, or if the route method is ALL (routes on a node must be\n   * deterministic).\n   *\n   * @param {Route} route - The route to add to the node.\n   * @throws TypeError - On validation error.\n   * @returns {void}\n   */\n  addRoute(route) {\n    if (!(route instanceof Route)) {\n      route = new Route(route);\n    }\n    if (!this.isSame(route)) {\n      throw new TypeError('route path must match node path.');\n    }\n    if (_.contains(route.methods, METHODS.ALL)) {\n      throw new TypeError('cannot register route with method ALL on node.');\n    }\n    _.forEach(route.methods, (method) => {\n      if (this._routes.has(method)) {\n        throw new TypeError(`duplicate method \"${method}\" added for path \"${route.path}\"`);\n      }\n      this._routes.set(method, route);\n\n    });\n  }\n\n  /**\n   * Adds a child node to this node.\n   *\n   * @param {Node} node - The node to add as a child.\n   * @returns {void}\n   */\n  addChild(node) {\n    if (!(node instanceof Node)) {\n      node = new Node(node);\n    }\n    if (this._children.has(node.path)) {\n      throw new TypeError(`Cannot add duplicate child on path ${node.path}`);\n    }\n\n    this._children.set(node.path, node);\n  }\n\n  /**\n   * Returns the node's children as an array.\n   *\n   * @returns {Array<Node>} - The node's children.\n   */\n  getChildren() {\n    return Array.from(this._children.values());\n  }\n\n  /**\n   * Returns the node's routes as an array.\n   *\n   * @returns {Array<Route>} - The routes associated with this node.\n   */\n  getRoutes() {\n    return Array.from(this._routes.values());\n  }\n\n  /**\n   * Indicates if this node is a parent to a route by comparing their paths.\n   *\n   * @param {Route} route - The route to compare.\n   * @returns {boolean} - If this node is a parent to the input route.\n   */\n  isParent(route) {\n    return utils.comparePaths(route.path, this.path) === 1;\n  }\n\n  /**\n   * Indicates if this node represents the same path as a route.\n   *\n   * @param {Route} route - The route to compare.\n   * @returns {boolean} - If this node is the same path as the input route.\n   */\n  isSame(route) {\n    return utils.comparePaths(route.path, this.path) === 0;\n  }\n\n  /**\n   * Indicates if the node can insert a route. Returns true if the node is the same or a parent to the route.\n   *\n   * @param {Route} route - The route to compare.\n   * @returns {boolean} - If the route can be inserted on this node.\n   */\n  canInsert(route) {\n    return utils.comparePaths(route.path, this.path) !== -1;\n  }\n\n  /**\n   * Recursively inserts a route into the node.\n   * If the node is not the same or a parent to the route, has no effect.\n   * If the route is on the same path as the node, adds the route to this node.\n   * If the route can be inserted on a child node, recurses down to the child node.\n   * Otherwise, adds a new child node to this node, then adds the route to the child node.\n   *\n   * @param {Route} route - The route to insert.\n   * @returns {void}\n   */\n  insert(route) {\n    if (!(route instanceof Route)) {\n      route = new Route(route);\n    }\n\n    if (!(this.canInsert(route))) {\n      throw new TypeError(`Cannot insert \"${route.path}\" into \"${this.path}\". It is not a match or a child path.`);\n    }\n\n    if (this.isSame(route)) {\n      return this.addRoute(route);\n    }\n\n    for (const child of this._children.values()) {\n      if (child.canInsert(route)) {\n        return child.insert(route);\n      }\n    }\n\n    const newNode = new Node({ path : route.path });\n    newNode.addRoute(route);\n    this._children.forEach((child, path) => {\n      if (newNode.isParent(child)) {\n        this._children.delete(path);\n        newNode.addChild(child);\n      }\n    });\n    this.addChild(newNode);\n  }\n\n  /**\n   * Recursively finds a route that matches the specified request. Returns a matching route or null if not match\n   * can be found.\n   *\n   * @param {Request} request - The request to find a matching route against\n   * @returns {Route} - The matching route.\n   * @throws an error with a code of 405 if no method match is made\n   */\n  find(request) {\n    let match;\n    if (this._parsePath(request.path)) {\n      match = this._routes.get(request.method);\n      if (match != null) {\n        return match;\n      }\n      else {\n        const error = new Error(`Invalid method ${request.method} for path ${request.path}`);\n        error.name = 'MethodNotFound';\n        error.statusCode = 405;\n        throw error;\n      }\n    }\n\n    for (const child of this._children.values()) {\n      match = child.find(request);\n      if (match) {\n        return match;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a pojo representation of the node.\n   *\n   * @returns {Object} - Plain object representation of the node.\n   */\n  toObject() {\n    const pojo = {\n      methods : _.map(this.getRoutes(), (route) => {\n        return route.methods;\n      }),\n      childRoutes : _.map(this.getChildren(), (childNode) => {\n        return childNode.path;\n      })\n    };\n    return pojo;\n  }\n}\n\nmodule.exports = Node;\n"
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "utils",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~utils",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Route",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~Route",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "METHODS",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~METHODS",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RouteParser",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~RouteParser",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Node",
    "memberof": "lib/Node.js",
    "longname": "lib/Node.js~Node",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Node.js",
    "importStyle": null,
    "description": "Router Node.\nRepresents a unique path on the router. Each node may contain one route per method, and any number of child nodes.\nNodes build a linked tree structure, representing each unique route on the router. It is used to serve OPTIONS\nrequests.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 21,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#constructor",
    "access": null,
    "description": "Node constructor.\n\nCreating a node automatically registers the OPTIONS request on this path.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node} - The Node instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The input options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.path",
        "description": "The path pattern the node represents"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "The Node instance"
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_path",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#_path",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parsed",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#_parsed",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_routes",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#_routes",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_children",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#_children",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#path",
    "access": null,
    "description": "Gets the path pattern that the node represents.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The path"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parsePath",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#_parsePath",
    "access": "private",
    "description": "Parses the given path string against this node's path pattern. If the input path is a match, returns\nan object whose key value pairs are the matched route params and their values. If the path is not a match,\nreturns false.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|Object} - False if the path is not a match, an object if it is."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The input path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "Object"
      ],
      "spread": false,
      "description": "False if the path is not a match, an object if it is."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addRoute",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#addRoute",
    "access": null,
    "description": "Adds a route to the node. Will throw an error if the route does not match the path of the node, if there is\nalready a route registered on the given method, or if the route method is ALL (routes on a node must be\ndeterministic).",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to add to the node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "TypeError - On validation error."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addChild",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#addChild",
    "access": null,
    "description": "Adds a child node to this node.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to add as a child."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getChildren",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#getChildren",
    "access": null,
    "description": "Returns the node's children as an array.",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>} - The node's children."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": "The node's children."
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRoutes",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#getRoutes",
    "access": null,
    "description": "Returns the node's routes as an array.",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Route>} - The routes associated with this node."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Route>"
      ],
      "spread": false,
      "description": "The routes associated with this node."
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isParent",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#isParent",
    "access": null,
    "description": "Indicates if this node is a parent to a route by comparing their paths.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If this node is a parent to the input route."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If this node is a parent to the input route."
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isSame",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#isSame",
    "access": null,
    "description": "Indicates if this node represents the same path as a route.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If this node is the same path as the input route."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If this node is the same path as the input route."
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "canInsert",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#canInsert",
    "access": null,
    "description": "Indicates if the node can insert a route. Returns true if the node is the same or a parent to the route.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the route can be inserted on this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the route can be inserted on this node."
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insert",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#insert",
    "access": null,
    "description": "Recursively inserts a route into the node.\nIf the node is not the same or a parent to the route, has no effect.\nIf the route is on the same path as the node, adds the route to this node.\nIf the route can be inserted on a child node, recurses down to the child node.\nOtherwise, adds a new child node to this node, then adds the route to the child node.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to insert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#find",
    "access": null,
    "description": "Recursively finds a route that matches the specified request. Returns a matching route or null if not match\ncan be found.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Route} - The matching route."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "The request to find a matching route against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Route"
      ],
      "spread": false,
      "description": "The matching route."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "an error with a code of 405 if no method match is made"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toObject",
    "memberof": "lib/Node.js~Node",
    "longname": "lib/Node.js~Node#toObject",
    "access": null,
    "description": "Returns a pojo representation of the node.",
    "lineNumber": 245,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Plain object representation of the node."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Plain object representation of the node."
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Request.js",
    "memberof": null,
    "longname": "lib/Request.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _                = require('lodash');\nconst utils            = require('./utils');\nconst TransformStream  = require('stream').Transform;\nconst isReadableStream = require('isstream').isReadable;\n\n/**\n * SuperRouter Request object.\n */\nclass Request {\n  /**\n   * Constructs a new request object.\n   *\n   * @param {object} options - The options object\n   * @param {string} path - The request path\n   * @param {string} method - The request method\n   * @param {object} [headers={}] - The request headers\n   * @param {ReadableStream} [body] - The request body stream\n   * @returns {Request} Request object\n   */\n  constructor(options) {\n    if (!_.isObject(options)) {\n      throw new TypeError('options must be an object.');\n    }\n\n    const headers = options.headers;\n    const body    = options.body;\n\n    if (headers != null && !_.isObject(headers)) {\n      throw new TypeError('headers must be an object.');\n    }\n    if (body != null && !isReadableStream(body)) {\n      throw new TypeError('body must be a readable stream.');\n    }\n\n    this.path   = options.path;\n    this.method = options.method;\n\n    this._originalPath    = options.originalPath || options.path;\n    this._headers         = new Map();\n    _.each(headers, (v, k) => {\n      this._headers.set(k.toLowerCase(), v);\n    });\n    this._body            = new TransformStream();\n    this._body._transform = function (chunk, encoding, done) {\n      return done(null, chunk);\n    };\n    if (isReadableStream(body)) {\n      body.pipe(this._body);\n    }\n\n    _.each(options, (v, k) => {\n      if (_.isUndefined(this[k])) {\n        this[k] = v;\n      }\n    });\n  }\n\n  /**\n   * Returns the original path of the request. The original path is the path that the request\n   * was initialized with, and cannot be changed, even if the path is later updated.\n   *\n   * @returns {string} - Original path\n   */\n  get originalPath() {\n    return this._originalPath;\n  }\n\n  /**\n   * Returns the request path\n   *\n   * @returns {string} - Request path\n   */\n  get path() {\n    return this._path;\n  }\n\n  /**\n   * Sets the request path.\n   *\n   * @param {string} path - The new request path\n   * @returns {void}\n   */\n  set path(path) {\n    if (!_.isString(path)) {\n      throw new TypeError('path must be a string.');\n    }\n    this._path = utils.normalizePath(path);\n  }\n\n  /**\n   * Returns the request method. Request method will be lower-cased.\n   *\n   * @returns {string} - The request method.\n   */\n  get method() {\n    return this._method;\n  }\n\n  /**\n   * Sets the request method. Input is case-insensitive.\n   *\n   * @param {string} method - The new request method.\n   * @returns {void}\n   */\n  set method(method) {\n    if (!(utils.isValidMethod(method))) {\n      throw new TypeError('method must be a valid method string.');\n    }\n    this._method = utils.normalizeMethod(method);\n  }\n\n  /**\n   * Returns the request headers as a plain object. Keys and values are lower-cased.\n   *\n   * @returns {object} - The request headers.\n   */\n  get headers() {\n    const obj = {};\n    for (const kv of this._headers) {\n      obj[kv[0]] = kv[1];\n    }\n\n    return obj;\n  }\n\n  /**\n   * Returns the value of a request header. Input is case-insensitive.\n   *\n   * @param {string} key - The request header key\n   * @returns {string} - The request header value\n   */\n  getHeader(key) {\n    return this._headers.get(key.toLowerCase());\n  }\n\n  /**\n   * Returns the underlying request body stream.\n   *\n   * @returns {TransformStream} - The request body stream.\n   */\n  get body() {\n    return this._body;\n  }\n\n  /**\n   * Sets the request body value.\n   *\n   * @param {*} val - The new request body value.\n   * @returns {void}\n   */\n  set body(val) {\n    this._body = val;\n  }\n\n  /**\n   * Returns a string representation of the request\n   *\n   * @returns {string} - representation of the request\n   */\n  toString() {\n\n    const copyOfHeaders = _.clone(this.headers);\n    const authInfo = copyOfHeaders.authorization;\n    if (authInfo != null) {\n      copyOfHeaders.authorization = `...${authInfo.slice(-4)}`;\n    }\n\n    return `Request: ${JSON.stringify({\n      method  : this.method,\n      path    : this.path,\n      headers : copyOfHeaders,\n      body    : this.body\n    }, null, 2)}`;\n  }\n}\n\nmodule.exports = Request;\n"
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/Request.js",
    "longname": "lib/Request.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "utils",
    "memberof": "lib/Request.js",
    "longname": "lib/Request.js~utils",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TransformStream",
    "memberof": "lib/Request.js",
    "longname": "lib/Request.js~TransformStream",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isReadableStream",
    "memberof": "lib/Request.js",
    "longname": "lib/Request.js~isReadableStream",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Request",
    "memberof": "lib/Request.js",
    "longname": "lib/Request.js~Request",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Request.js",
    "importStyle": null,
    "description": "SuperRouter Request object.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 44,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#constructor",
    "access": null,
    "description": "Constructs a new request object.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Request} Request object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The request path"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The request method"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "headers",
        "description": "The request headers"
      },
      {
        "nullable": null,
        "types": [
          "ReadableStream"
        ],
        "spread": false,
        "optional": true,
        "name": "body",
        "description": "The request body stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": "Request object"
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#path",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "method",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#method",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_originalPath",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_originalPath",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_headers",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_headers",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_body",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_body",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "originalPath",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#originalPath",
    "access": null,
    "description": "Returns the original path of the request. The original path is the path that the request\nwas initialized with, and cannot be changed, even if the path is later updated.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Original path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Original path"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#path",
    "access": null,
    "description": "Returns the request path",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Request path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Request path"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#path",
    "access": null,
    "description": "Sets the request path.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The new request path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_path",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_path",
    "access": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "method",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#method",
    "access": null,
    "description": "Returns the request method. Request method will be lower-cased.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - The request method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The request method."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "method",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#method",
    "access": null,
    "description": "Sets the request method. Input is case-insensitive.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The new request method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_method",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_method",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "headers",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#headers",
    "access": null,
    "description": "Returns the request headers as a plain object. Keys and values are lower-cased.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - The request headers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The request headers."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeader",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#getHeader",
    "access": null,
    "description": "Returns the value of a request header. Input is case-insensitive.",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - The request header value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The request header key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The request header value"
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "body",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#body",
    "access": null,
    "description": "Returns the underlying request body stream.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TransformStream} - The request body stream."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransformStream"
      ],
      "spread": false,
      "description": "The request body stream."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "body",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#body",
    "access": null,
    "description": "Sets the request body value.",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The new request body value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_body",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#_body",
    "access": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "lib/Request.js~Request",
    "longname": "lib/Request.js~Request#toString",
    "access": null,
    "description": "Returns a string representation of the request",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - representation of the request"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "representation of the request"
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Response.js",
    "memberof": null,
    "longname": "lib/Response.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _                = require('lodash');\nconst TransformStream  = require('stream').Transform;\nconst isReadableStream = require('isstream').isReadable;\n\n/**\n * SuperRouter Response object.\n */\nclass Response {\n  constructor() {\n    this.setBody();\n\n    this._headers   = new Map();\n    this._statusCode = 200;\n    this.ended = false;\n  }\n\n  /**\n   * Gets the status code of the response.\n   * @returns {number} - the status code\n   */\n  get statusCode() {\n    return this._statusCode;\n  }\n\n  /**\n   * Sets the status code of the response.\n   * @param {number} val - The new status code\n   * @returns {void}\n   */\n  set statusCode(val) {\n    if (!_.isFinite(val)) {\n      throw new TypeError('statusCode must be a number.');\n    }\n    this._statusCode = val;\n  }\n\n  /**\n   * Gets the headers of the response as a plain object. Response header key / value pairs are all\n   * lower-cased.\n   * @returns {Object} - Response headers\n   */\n  get headers() {\n    const obj = {};\n    for (const kv of this._headers) {\n      obj[kv[0]] = kv[1];\n    }\n\n    return obj;\n  }\n\n  /**\n   * Gets the value of a response header. Keys are case-insensitive. Returns undefined if the header\n   * is not set.\n   * @param {string} key - the header key\n   * @returns {string} - the header value.\n   */\n  getHeader(key) {\n    if (!_.isString(key)) {\n      throw new TypeError('First argument: key must be a string.');\n    }\n    return this._headers.get(key.toLowerCase());\n  }\n\n  /**\n   * Sets the value of a response header. Keys and values are case-insensitive.\n   * @param {string} key - the response header key\n   * @param {string} value - the response header value\n   * @returns {void}\n   */\n  setHeader(key, value) {\n    if (!_.isString(key)) {\n      throw new TypeError('First argument: key must be a string.');\n    }\n    if (!_.isString(value)) {\n      throw new TypeError('Second argument: value must be a string.');\n    }\n    this._headers.set(key.toLowerCase(), value);\n  }\n\n  /**\n   * Clears the value of a response header.\n   * @param {string} key - the response header to clear\n   * @returns {void}\n   */\n  clearHeader(key) {\n    if (!_.isString(key)) {\n      throw new TypeError('First argument: key must be a string.');\n    }\n    this._headers.delete(key.toLowerCase());\n  }\n\n  /**\n   * Returns the underlying response body stream.\n   * @returns {TransformStream} - The response body stream.\n   */\n  get body() {\n    return this._body;\n  }\n\n  /**\n   * Returns the response body according to how it was most recently set. If the body is being\n   * used as a stream, will return the body stream. If the body is being written with values, will\n   * return the last assigned value.\n   * @returns {*} - The response body value\n   */\n  getBody() {\n    return this._lastAssignedBody;\n  }\n\n  /**\n   * Sets the value of the response body. If the value is a readable stream, it will be piped into\n   * the underlying response body stream. If the value is plain type, it will be written to the\n   * underlying body stream.\n   * @param {ReadableStream|*} body - The new body value\n   * @returns {void}\n   */\n  setBody(body) {\n    this._body             = new TransformStream({ objectMode : true });\n    this._body._transform  = function (chunk, encoding, done) {\n      return done(null, chunk);\n    };\n    this._lastAssignedBody = this._body;\n\n    if (isReadableStream(body)) {\n      body.pipe(this._body);\n      body.on('error', (err) => {\n        this._body.emit('error', err);\n      });\n    }\n    else if (!_.isUndefined(body)) {\n      this._body.end(body);\n      this._lastAssignedBody = body;\n    }\n  }\n\n  /**\n   * Sets the ended property to signal an early return of the Response\n   * @returns {void}\n   */\n  end() {\n    this.ended = true;\n  }\n\n  /**\n   * Returns a string representation of the response\n   *\n   * @returns {string} - representation of the response\n   */\n  toString() {\n\n    const copyOfHeaders = _.clone(this.headers);\n    const authInfo = copyOfHeaders.authorization;\n    if (authInfo != null) {\n      copyOfHeaders.authorization = `...${authInfo.slice(-4)}`;\n    }\n\n    return `Response: ${JSON.stringify({\n      statusCode : this.statusCode,\n      headers    : this.headers,\n      body       : this.getBody()\n    }, null, 2)}`;\n  }\n\n}\n\nmodule.exports = Response;\n"
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/Response.js",
    "longname": "lib/Response.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Response.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TransformStream",
    "memberof": "lib/Response.js",
    "longname": "lib/Response.js~TransformStream",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Response.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isReadableStream",
    "memberof": "lib/Response.js",
    "longname": "lib/Response.js~isReadableStream",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Response.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Response",
    "memberof": "lib/Response.js",
    "longname": "lib/Response.js~Response",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Response.js",
    "importStyle": null,
    "description": "SuperRouter Response object.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_headers",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_headers",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_statusCode",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_statusCode",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ended",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#ended",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "statusCode",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#statusCode",
    "access": null,
    "description": "Gets the status code of the response.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - the status code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the status code"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "statusCode",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#statusCode",
    "access": null,
    "description": "Sets the status code of the response.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The new status code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_statusCode",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_statusCode",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "headers",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#headers",
    "access": null,
    "description": "Gets the headers of the response as a plain object. Response header key / value pairs are all\nlower-cased.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Response headers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Response headers"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeader",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#getHeader",
    "access": null,
    "description": "Gets the value of a response header. Keys are case-insensitive. Returns undefined if the header\nis not set.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - the header value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the header key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the header value."
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setHeader",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#setHeader",
    "access": null,
    "description": "Sets the value of a response header. Keys and values are case-insensitive.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the response header key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the response header value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearHeader",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#clearHeader",
    "access": null,
    "description": "Clears the value of a response header.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the response header to clear"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "body",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#body",
    "access": null,
    "description": "Returns the underlying response body stream.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TransformStream} - The response body stream."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TransformStream"
      ],
      "spread": false,
      "description": "The response body stream."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getBody",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#getBody",
    "access": null,
    "description": "Returns the response body according to how it was most recently set. If the body is being\nused as a stream, will return the body stream. If the body is being written with values, will\nreturn the last assigned value.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} - The response body value"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The response body value"
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setBody",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#setBody",
    "access": null,
    "description": "Sets the value of the response body. If the value is a readable stream, it will be piped into\nthe underlying response body stream. If the value is plain type, it will be written to the\nunderlying body stream.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadableStream",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The new body value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_body",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_body",
    "access": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_lastAssignedBody",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_lastAssignedBody",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_lastAssignedBody",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#_lastAssignedBody",
    "access": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#end",
    "access": null,
    "description": "Sets the ended property to signal an early return of the Response",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ended",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#ended",
    "access": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "lib/Response.js~Response",
    "longname": "lib/Response.js~Response#toString",
    "access": null,
    "description": "Returns a string representation of the response",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - representation of the response"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "representation of the response"
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Route.js",
    "memberof": null,
    "longname": "lib/Route.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _           = require('lodash');\nconst Q           = require('q');\nconst utils       = require('./utils');\nconst METHODS     = require('./METHODS');\nconst Request     = require('./Request');\nconst Response    = require('./Response');\nconst RouteParser = require('route-parser');\n\n/**\n * Route class.\n * A route is defined as a path pattern, method, and handler. Testing requests against routes and executing matching\n * handlers is the core of request processing.\n */\nclass Route {\n\n  /**\n   * Instantiates a new Route.\n   *\n   * @param {Object} options - The options object\n   * @param {Function} options.handler - The handler function to be executed if the route is matched.\n   * @param {Function} options.errorHandler - The handler function to be executed if the route throws an error.\n   * @param {String} [path='*all'] - The path pattern that the route should be executed against. If not provided,\n   *  matches all paths.\n   * @param {String | Array} [method='*'] - The method(s) that the route should be executed against. If not provided, mathes\n   *  all methods.\n   * @returns {Route} - The new route instance.\n   */\n  constructor(options) {\n    if (!_.isObject(options)) {\n      throw new TypeError('options must be an object.');\n    }\n    if (!_.isFunction(options.handler)) {\n      throw new TypeError('handler must be a function.');\n    }\n    if (!_.isUndefined(options.errorHandler) && !_.isFunction(options.errorHandler)) {\n      throw new TypeError('errorHandler must be a function.');\n    }\n    if (options.path && !_.isString(options.path)) {\n      throw new TypeError('path must be a string.');\n    }\n    if (options.methods && !utils.isValidMethodArray(options.methods)) {\n      throw new TypeError('method must be a valid method string.');\n    }\n\n    _.extend(this, options);\n\n    this._path    = utils.normalizePath(options.path || '*all');\n    this._methods = this._convertAndNormalizeMethods(options.methods || METHODS.ALL);\n    this._handler = options.handler;\n    this._errorHandler = options.errorHandler;\n    this._parsed  = new RouteParser(this._path);\n  }\n\n  /**\n   * Returns the route path.\n   *\n   * @returns {String} - The route path.\n   */\n  get path() {\n    return this._path;\n  }\n\n  /**\n   * Returns the route method.\n   *\n   * @returns {String} - The route method.\n   */\n  get methods() {\n    return this._methods;\n  }\n\n  /**\n   * Returns the route handler.\n   *\n   * @returns {Function} - The route handler.\n   */\n  get handler() {\n    return this._handler;\n  }\n\n  /**\n   * Returns the error handler.\n   *\n   * @returns {Function} - The error handler.\n   */\n  get errorHandler() {\n    return this._errorHandler;\n  }\n\n  /**\n   * Tests if the given method matches this route\n   *\n   * @param {String} method - The input method\n   * @returns {boolean} - If the method matches this route\n   * @private\n   */\n  _isMethodMatch(method) {\n    return (_.contains(this.methods, METHODS.ALL)) || (_.difference(this._convertAndNormalizeMethods(method), this.methods).length === 0);\n  }\n\n  /**\n   * Converts and normalize method(s) to an array\n   *\n   * @param {Array | String} methodArray - The input method\n   * @returns {Array} - Array of methods\n   * @private\n   */\n  _convertAndNormalizeMethods(methodArray) {\n    return this._normalizeAllMethods(this._convertMethodsToArray(methodArray));\n  }\n\n  /**\n   * Converts method(s) to an array\n   *\n   * @param {Array | String} methodArray - The input method\n   * @returns {Array} - Array of methods\n   * @private\n   */\n  _convertMethodsToArray(methodArray) {\n    if (!_.isArray(methodArray)) {\n      methodArray = [methodArray];\n    }\n    return methodArray;\n  }\n\n  /**\n   * Normalizes all methods in an array\n   *\n   * @param {Array} methodArray - The input method\n   * @returns {Array} - Array of normalized methods\n   * @private\n   */\n  _normalizeAllMethods(methodArray) {\n    return _.map(methodArray, function (method) {\n      return utils.normalizeMethod(method);\n    });\n  }\n\n  /**\n   * Parses the given path string against this route's path pattern. If the input path is a match, returns\n   * an object whose key value pairs are the matched route params and their values. If the path is not a match,\n   * returns false.\n   *\n   * @param {String} path - The input path\n   * @returns {Boolean|Object} - False if the path is not a match, an object if it is.\n   * @private\n   */\n  _parsePath(path) {\n    return this._parsed.match(path);\n  }\n\n  /**\n   * Tests whether a given request object is a match against this route, satisfying the path & method requirements.\n   *\n   * @param {Request} request - The input requiest\n   * @returns {Boolean} - Whether the request matches this route.\n   */\n  isMatch(request) {\n    if (!(request instanceof Request)) {\n      throw new Error('First argument: request must be a SuperRouter Request instance.');\n    }\n    return this._isMethodMatch(request.method) && _.isObject(this._parsePath(request.path));\n  }\n\n  /**\n   * Executes this route against a provided request / response. Returns a promise that will resolve or reject when\n   * execution is complete.\n   *  - If the request is not a match, returns an empty promise.\n   *  - If the request is a match, returns a promise for the return value of the route handler\n   *\n   * @param {Object} options - The options object\n   * @param {Request} options.request - The request the route will be tested & executed against\n   * @param {Response} options.response - The response the route handler will be invoked with\n   * @returns {Promise} - A promise that will complete when execution is complete.\n   */\n  execute(options) {\n    if (!_.isObject(options)) {\n      throw new TypeError('options must be an object.');\n    }\n\n    const request  = options.request;\n    const response = options.response;\n\n    if (!(request instanceof Request)) {\n      throw new Error('request must be a SuperRouter Request instance.');\n    }\n    if (!(response instanceof Response)) {\n      throw new Error('response must be a SuperRouter Response instance.');\n    }\n\n    request.routeParams = {};\n    if (!this.isMatch(request)) {\n      return Q();\n    }\n    try {\n      request.routeParams = this._parsePath(request.path);\n\n      return Q().then(() => {\n        return this.handler(options);\n      }).catch((error) => {\n        if (this.errorHandler) {\n          return this.errorHandler({ request, response, error });\n        }\n        else {\n          throw error;\n        }\n      });\n    }\n    catch (err) {\n      return Q.reject(err);\n    }\n  }\n\n}\n\nmodule.exports = Route;\n"
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Q",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~Q",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "utils",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~utils",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "METHODS",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~METHODS",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Request",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~Request",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Response",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~Response",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RouteParser",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~RouteParser",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Route",
    "memberof": "lib/Route.js",
    "longname": "lib/Route.js~Route",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Route.js",
    "importStyle": null,
    "description": "Route class.\nA route is defined as a path pattern, method, and handler. Testing requests against routes and executing matching\nhandlers is the core of request processing.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#constructor",
    "access": null,
    "description": "Instantiates a new Route.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Route} - The new route instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.handler",
        "description": "The handler function to be executed if the route is matched."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.errorHandler",
        "description": "The handler function to be executed if the route throws an error."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'*all'",
        "defaultRaw": "'*all'",
        "name": "path",
        "description": "The path pattern that the route should be executed against. If not provided,\n matches all paths."
      },
      {
        "nullable": null,
        "types": [
          "String ",
          " Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'*'",
        "defaultRaw": "'*'",
        "name": "method",
        "description": "The method(s) that the route should be executed against. If not provided, mathes\n all methods."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Route"
      ],
      "spread": false,
      "description": "The new route instance."
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_path",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_path",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_methods",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_methods",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_handler",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_handler",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_errorHandler",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_errorHandler",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parsed",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_parsed",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#path",
    "access": null,
    "description": "Returns the route path.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The route path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The route path."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "methods",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#methods",
    "access": null,
    "description": "Returns the route method.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The route method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The route method."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "handler",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#handler",
    "access": null,
    "description": "Returns the route handler.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} - The route handler."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The route handler."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "errorHandler",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#errorHandler",
    "access": null,
    "description": "Returns the error handler.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} - The error handler."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The error handler."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_isMethodMatch",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_isMethodMatch",
    "access": "private",
    "description": "Tests if the given method matches this route",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the method matches this route"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The input method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the method matches this route"
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_convertAndNormalizeMethods",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_convertAndNormalizeMethods",
    "access": "private",
    "description": "Converts and normalize method(s) to an array",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Array of methods"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "methodArray",
        "description": "The input method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of methods"
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_convertMethodsToArray",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_convertMethodsToArray",
    "access": "private",
    "description": "Converts method(s) to an array",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Array of methods"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "methodArray",
        "description": "The input method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of methods"
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_normalizeAllMethods",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_normalizeAllMethods",
    "access": "private",
    "description": "Normalizes all methods in an array",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Array of normalized methods"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "methodArray",
        "description": "The input method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of normalized methods"
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parsePath",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#_parsePath",
    "access": "private",
    "description": "Parses the given path string against this route's path pattern. If the input path is a match, returns\nan object whose key value pairs are the matched route params and their values. If the path is not a match,\nreturns false.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|Object} - False if the path is not a match, an object if it is."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The input path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "Object"
      ],
      "spread": false,
      "description": "False if the path is not a match, an object if it is."
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isMatch",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#isMatch",
    "access": null,
    "description": "Tests whether a given request object is a match against this route, satisfying the path & method requirements.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} - Whether the request matches this route."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "The input requiest"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the request matches this route."
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "execute",
    "memberof": "lib/Route.js~Route",
    "longname": "lib/Route.js~Route#execute",
    "access": null,
    "description": "Executes this route against a provided request / response. Returns a promise that will resolve or reject when\nexecution is complete.\n - If the request is not a match, returns an empty promise.\n - If the request is a match, returns a promise for the return value of the route handler",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - A promise that will complete when execution is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object"
      },
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "options.request",
        "description": "The request the route will be tested & executed against"
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "options.response",
        "description": "The response the route handler will be invoked with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that will complete when execution is complete."
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/RouteTree.js",
    "memberof": null,
    "longname": "lib/RouteTree.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst Node  = require('./Node');\n\nclass RouteTree {\n  constructor() {\n    this._root = new Node({ path : '/' });\n  }\n\n  addRoute(route) {\n    return this._root.insert(route);\n  }\n\n  find(request) {\n    return this._root.find(request);\n  }\n\n}\n\nmodule.exports = RouteTree;\n"
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Node",
    "memberof": "lib/RouteTree.js",
    "longname": "lib/RouteTree.js~Node",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/RouteTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RouteTree",
    "memberof": "lib/RouteTree.js",
    "longname": "lib/RouteTree.js~RouteTree",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/RouteTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/RouteTree.js~RouteTree",
    "longname": "lib/RouteTree.js~RouteTree#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_root",
    "memberof": "lib/RouteTree.js~RouteTree",
    "longname": "lib/RouteTree.js~RouteTree#_root",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addRoute",
    "memberof": "lib/RouteTree.js~RouteTree",
    "longname": "lib/RouteTree.js~RouteTree#addRoute",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "route",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "lib/RouteTree.js~RouteTree",
    "longname": "lib/RouteTree.js~RouteTree#find",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Router.js",
    "memberof": null,
    "longname": "lib/Router.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst Route     = require('./Route');\nconst RouteTree = require('./RouteTree');\n\nconst SPLAT    = /\\*/;\nconst OPTIONAL = /\\(/;\n\n/**\n * SuperRouter Router object\n */\nclass Router {\n  constructor() {\n    this._routesTree = new RouteTree();\n\n    this.match   = this.match.bind(this);\n    this.execute = this.execute.bind(this);\n  }\n\n  /**\n   * Adds a route to the router. Routes must be unique and deterministic (no splats or optionals). Routes can\n   * be annotated with additional information, will be available on the Request after matching.\n   *\n   * Any route parameters defined in the path will be available on the request.routeParams object when the\n   * handler is executed.\n   *\n   * If the route handler returns a promise, the app will wait for that promise to resolve or reject before\n   * moving to the next middleware in the stack.\n   *\n   * @example\n   * router.addRoute({\n   *  path : '/cases/:caseId',\n   *  methods : 'get',\n   *  handler : ({request, response}) => {\n   *    return Database.getCaseById(request.routeParams.caseId).then((caseInstance) => {\n   *      request.setBody(caseInstance);\n   *    });\n   *  }\n   * });\n   *\n   * @param {Route} route - The route definition. If a plain object is provided, will be run through the\n   *   Route constructor.\n   * @returns {void}\n   */\n  addRoute(route) {\n    if (!(route instanceof Route)) {\n      route = new Route(route);\n    }\n\n    if (route.path.match(SPLAT) || route.path.match(OPTIONAL)) {\n      throw new TypeError('Splats and optional groups are not supported for routes.');\n    }\n\n    this._routesTree.addRoute(route);\n  }\n\n  /**\n   * Middleware to be consumed by a SuperRouter App instance. Causes a request to be matched against\n   * the router. The matched route will be assigned to `request.matchedRoute`. In the case of no match,\n   * the middleware does not throw an error; the matchedRoute key will simply be undefined.\n   *\n   * @example\n   * app.then(router.match);\n   *\n   * @param {object} options - The request & response used by app middleware.\n   * @returns {void}\n   * @throws an error with a code of 404 if no match is found\n   */\n  match(options) {\n    const request = options.request;\n\n    request.matchedRoute = this._routesTree.find(request);\n\n    if (request.matchedRoute == null) {\n      const error = new Error(`No route matched ${request.path}`);\n      error.name = 'PathNotFound';\n      error.statusCode = 404;\n      throw error;\n    }\n  }\n\n  /**\n   * Middleware to be consumed by a SuperRouter App instance. Causes the handler of a matched route to\n   * be executed. If `request.matchedRoute` is not defined, the middleware does nothing.\n   *\n   * @example\n   * app.then(router.execute);\n   *\n   * @param {object} options - The request & response used by app middleware.\n   * @returns {void}\n   */\n  execute(options) {\n    const request  = options.request;\n    const response = options.response;\n\n    if (request.matchedRoute != null) {\n      return request.matchedRoute.execute({ request, response });\n    }\n  }\n\n}\n\nmodule.exports = Router;\n"
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Route",
    "memberof": "lib/Router.js",
    "longname": "lib/Router.js~Route",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RouteTree",
    "memberof": "lib/Router.js",
    "longname": "lib/Router.js~RouteTree",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SPLAT",
    "memberof": "lib/Router.js",
    "longname": "lib/Router.js~SPLAT",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "OPTIONAL",
    "memberof": "lib/Router.js",
    "longname": "lib/Router.js~OPTIONAL",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Router",
    "memberof": "lib/Router.js",
    "longname": "lib/Router.js~Router",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/Router.js",
    "importStyle": null,
    "description": "SuperRouter Router object",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_routesTree",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#_routesTree",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "match",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#match",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "execute",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#execute",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addRoute",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#addRoute",
    "access": null,
    "description": "Adds a route to the router. Routes must be unique and deterministic (no splats or optionals). Routes can\nbe annotated with additional information, will be available on the Request after matching.\n\nAny route parameters defined in the path will be available on the request.routeParams object when the\nhandler is executed.\n\nIf the route handler returns a promise, the app will wait for that promise to resolve or reject before\nmoving to the next middleware in the stack.",
    "examples": [
      "router.addRoute({\n path : '/cases/:caseId',\n methods : 'get',\n handler : ({request, response}) => {\n   return Database.getCaseById(request.routeParams.caseId).then((caseInstance) => {\n     request.setBody(caseInstance);\n   });\n }\n});"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route definition. If a plain object is provided, will be run through the\n  Route constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "match",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#match",
    "access": null,
    "description": "Middleware to be consumed by a SuperRouter App instance. Causes a request to be matched against\nthe router. The matched route will be assigned to `request.matchedRoute`. In the case of no match,\nthe middleware does not throw an error; the matchedRoute key will simply be undefined.",
    "examples": [
      "app.then(router.match);"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The request & response used by app middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "an error with a code of 404 if no match is found"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "execute",
    "memberof": "lib/Router.js~Router",
    "longname": "lib/Router.js~Router#execute",
    "access": null,
    "description": "Middleware to be consumed by a SuperRouter App instance. Causes the handler of a matched route to\nbe executed. If `request.matchedRoute` is not defined, the middleware does nothing.",
    "examples": [
      "app.then(router.execute);"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The request & response used by app middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/index.js",
    "memberof": null,
    "longname": "lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nexports.Request    = require('./Request');\nexports.Response   = require('./Response');\nexports.Router     = require('./Router');\nexports.App        = require('./App');\nexports.Middleware = require('./middleware');\n"
  },
  {
    "__docId__": 135,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/middleware/ContentNegotiation.js",
    "memberof": null,
    "longname": "lib/middleware/ContentNegotiation.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nconst Q = require('q');\n\nclass ContentNegotiation {\n\n  static request(opts) {\n    const request = opts.request;\n\n    if (_isChunked(request)) {\n      return;\n    }\n\n    const deferred = Q.defer();\n    let newBody    = {};\n    request.body.on('data', (chunk) => {\n      try {\n        newBody = JSON.parse(chunk);\n      }\n      catch (e) {\n        const error = new Error(`Invalid JSON in request body.`);\n        error.name = 'InvalidJSON';\n        error.messageDetails = 'Hint: JSON does not allow a trailing comma.';\n        error.statusCode = 400;\n        deferred.reject(error);\n      }\n    });\n\n    request.body.on('end', () => {\n      request.body = newBody;\n      deferred.resolve();\n    });\n\n    return deferred.promise;\n  }\n\n  static response(opts) {\n    const response = opts.response;\n    if (!_isChunked(response)) {\n      response.setHeader('content-type', 'application/json');\n      return response.setBody(JSON.stringify(response.getBody()));\n    }\n  }\n\n}\n\nfunction _isChunked(reqres) {\n  const contentType = reqres.getHeader('Transfer-Encoding');\n  return (contentType && contentType.toLowerCase().indexOf('chunked') > -1);\n}\n\nmodule.exports = ContentNegotiation;\n"
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Q",
    "memberof": "lib/middleware/ContentNegotiation.js",
    "longname": "lib/middleware/ContentNegotiation.js~Q",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/middleware/ContentNegotiation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ContentNegotiation",
    "memberof": "lib/middleware/ContentNegotiation.js",
    "longname": "lib/middleware/ContentNegotiation.js~ContentNegotiation",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/middleware/ContentNegotiation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "request",
    "memberof": "lib/middleware/ContentNegotiation.js~ContentNegotiation",
    "longname": "lib/middleware/ContentNegotiation.js~ContentNegotiation.request",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "response",
    "memberof": "lib/middleware/ContentNegotiation.js~ContentNegotiation",
    "longname": "lib/middleware/ContentNegotiation.js~ContentNegotiation.response",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_isChunked",
    "memberof": "lib/middleware/ContentNegotiation.js",
    "longname": "lib/middleware/ContentNegotiation.js~_isChunked",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/middleware/ContentNegotiation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "reqres",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/middleware/auth.js",
    "memberof": null,
    "longname": "lib/middleware/auth.js",
    "access": null,
    "description": null,
    "lineNumber": 0,
    "content": ""
  },
  {
    "__docId__": 142,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/middleware/index.js",
    "memberof": null,
    "longname": "lib/middleware/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n\nexports.ContentNegotiation  = require('./ContentNegotiation');\n"
  },
  {
    "__docId__": 143,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/utils.js",
    "memberof": null,
    "longname": "lib/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst _       = require('lodash');\nconst METHODS = require('./METHODS');\n\n/**\n * Utility class\n * @private\n */\nclass utils {\n\n  /**\n   * Compares two path pattern strings, as used in routing. Returns 0 if they are the same (they would match\n   * the same request path). Returns 1 if the first path is a parent to the second path. Returns -1 if the\n   * second path is a parent, sibling, or cousin.\n   *\n   * @param {String} p1 - first path string\n   * @param {String} p2 - first path string\n   * @returns {Number} - The comparator value\n   */\n  static comparePaths(p1, p2) {\n    const PARAM_RE = /\\/:[^\\/]+/gi;\n    p1             = p1.replace(PARAM_RE, '/:');\n    p2             = p2.replace(PARAM_RE, '/:');\n\n    if (p1 === p2) {\n      return 0;\n    }\n    if (_.startsWith(p1, p2)) {\n      return 1;\n    }\n    return -1;\n\n  }\n\n  /**\n   * Normalizes path strings for routing and requests.\n   *  - Strips trailing slashes\n   *  - Lowercases path parts other than route params\n   *\n   * @param {String} path - The path string\n   * @returns {String} - The normalized path\n   */\n  static normalizePath(path) {\n    while (_.last(path) === '/' && path.length > 1) {\n      path = path.slice(0, -1);\n    }\n    return path.replace(/\\/[^:][^\\/]+/gi, (match) => {\n      return match.toLowerCase();\n    });\n  }\n\n  /**\n   * Normalizes a method string to lower case\n   *\n   * @param {string} method - The method string\n   * @returns {string} - The nrormalized method\n   */\n  static normalizeMethod(method) {\n    return method.toUpperCase();\n  }\n\n  /**\n   * Tests if a method string is valid.\n   *\n   * @param {String} method - The method string\n   * @returns {Boolean} - If the method is valid\n   */\n  static isValidMethod(method) {\n    return _.isString(method) && _.contains(METHODS, this.normalizeMethod(method));\n  }\n\n  /**\n  * Tests if a method array is valid.\n  *\n  * @param {Array} methodArray - The method array\n  * @returns {Boolean} - If the method array is valid\n  */\n  static isValidMethodArray(methodArray) {\n    if (_.isArray(methodArray)) {\n      return _.every(methodArray, (method) => {\n        return this.isValidMethod(method);\n      });\n    }\n    else {\n      return this.isValidMethod(methodArray);\n    }\n  }\n}\n\nmodule.exports = utils;\n"
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_",
    "memberof": "lib/utils.js",
    "longname": "lib/utils.js~_",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "METHODS",
    "memberof": "lib/utils.js",
    "longname": "lib/utils.js~METHODS",
    "access": null,
    "export": false,
    "importPath": "super-router/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "utils",
    "memberof": "lib/utils.js",
    "longname": "lib/utils.js~utils",
    "access": "private",
    "export": false,
    "importPath": "super-router/lib/utils.js",
    "importStyle": null,
    "description": "Utility class",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "comparePaths",
    "memberof": "lib/utils.js~utils",
    "longname": "lib/utils.js~utils.comparePaths",
    "access": null,
    "description": "Compares two path pattern strings, as used in routing. Returns 0 if they are the same (they would match\nthe same request path). Returns 1 if the first path is a parent to the second path. Returns -1 if the\nsecond path is a parent, sibling, or cousin.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} - The comparator value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "first path string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "first path string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The comparator value"
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "normalizePath",
    "memberof": "lib/utils.js~utils",
    "longname": "lib/utils.js~utils.normalizePath",
    "access": null,
    "description": "Normalizes path strings for routing and requests.\n - Strips trailing slashes\n - Lowercases path parts other than route params",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The normalized path"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The normalized path"
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "normalizeMethod",
    "memberof": "lib/utils.js~utils",
    "longname": "lib/utils.js~utils.normalizeMethod",
    "access": null,
    "description": "Normalizes a method string to lower case",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - The nrormalized method"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The nrormalized method"
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isValidMethod",
    "memberof": "lib/utils.js~utils",
    "longname": "lib/utils.js~utils.isValidMethod",
    "access": null,
    "description": "Tests if a method string is valid.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} - If the method is valid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the method is valid"
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isValidMethodArray",
    "memberof": "lib/utils.js~utils",
    "longname": "lib/utils.js~utils.isValidMethodArray",
    "access": null,
    "description": "Tests if a method array is valid.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} - If the method array is valid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "methodArray",
        "description": "The method array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the method array is valid"
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/App.test.js",
    "memberof": null,
    "longname": "test/App.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst proxyquire        = require('proxyquire');\nconst Q                 = require('q');\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect  = chai.expect;\nconst sandbox = sinon.sandbox.create();\n\nconst Request  = require('../lib/Request');\nconst Response = require('../lib/Response');\nconst Route    = require('../lib/Route');\n\nlet App;\nlet app;\n\ndescribe('App', () => {\n\n  beforeEach(() => {\n    App = require('../lib/App');\n    app = new App();\n  });\n\n  describe('constructor', () => {\n\n  });\n\n  describe('use', () => {\n    let mockRoute;\n\n    beforeEach(() => {\n      mockRoute = sinon.spy();\n      App       = proxyquire('../lib/App', {\n        './Route' : mockRoute\n      });\n      app       = new App();\n    });\n\n\n    it('should run the input through the Route constructor if it is not a Route instance', () => {\n      const opts = {};\n      app.then(opts);\n      expect(mockRoute).to.have.been.calledOnce;\n      expect(mockRoute).to.have.been.calledWithNew;\n      expect(mockRoute).to.have.been.calledWith(opts);\n    });\n\n    it('should not run the input through the Route constructor if it is a Route instance', () => {\n      const route = new mockRoute({ handler : sinon.spy() });\n      mockRoute.reset();\n\n      app.then(route);\n      expect(mockRoute).to.not.have.been.called;\n    });\n\n    it('should accept a function input and use it as a route handler', () => {\n      const opts = sinon.spy();\n      app.then(opts);\n      expect(mockRoute).to.have.been.calledOnce;\n      expect(mockRoute).to.have.been.calledWithNew;\n      expect(mockRoute).to.have.been.calledWith({\n        handler : opts\n      });\n    });\n  });\n\n  describe('useError', () => {\n    let mockRoute;\n\n    beforeEach(() => {\n      mockRoute = sinon.spy();\n      App       = proxyquire('../lib/App', {\n        './Route' : mockRoute\n      });\n      app       = new App();\n    });\n\n\n    it('should run the input through the Route constructor if it is not a Route instance', () => {\n      const opts = {};\n      app.catch(opts);\n      expect(mockRoute).to.have.been.calledOnce;\n      expect(mockRoute).to.have.been.calledWithNew;\n      expect(mockRoute).to.have.been.calledWith(opts);\n    });\n\n    it('should not run the input through the Route constructor if it is a Route instance', () => {\n      const route = new mockRoute({ handler : sinon.spy() });\n      mockRoute.reset();\n\n      app.catch(route);\n      expect(mockRoute).to.not.have.been.called;\n    });\n\n    it('should accept a function input and use it as a route handler', () => {\n      const opts = sinon.spy();\n      app.catch(opts);\n      expect(mockRoute).to.have.been.calledOnce;\n      expect(mockRoute).to.have.been.calledWithNew;\n      expect(mockRoute).to.have.been.calledWith({\n        handler : opts\n      });\n    });\n  });\n\n  describe('processRequest', () => {\n    let request;\n    let middleware1;\n    let middleware2;\n    let middleware3;\n    let middleware4;\n    let errMiddleware1;\n    let errMiddleware2;\n    let errMiddleware3;\n    let errMiddleware4;\n\n    beforeEach(() => {\n      request = new Request({\n        headers : {},\n        path    : '/a',\n        method  : 'get'\n      });\n\n      middleware1 = sinon.createStubInstance(Route);\n      middleware2 = sinon.createStubInstance(Route);\n      middleware3 = new Route({\n        handler : sinon.spy(function (opts) {\n          opts.response.end();\n        })\n      });\n      middleware4 = sinon.createStubInstance(Route);\n\n      errMiddleware1 = new Route({\n        handler : sinon.spy()\n      });\n      sandbox.stub(errMiddleware1, 'execute');\n      errMiddleware2 = new Route({\n        handler : sinon.spy()\n      });\n      sandbox.stub(errMiddleware2, 'execute');\n      errMiddleware3 = new Route({\n        handler : sinon.spy(function (opts) {\n          opts.response.end();\n          throw new Error('Failure');\n        })\n      });\n      errMiddleware4 = new Route({\n        handler : sinon.spy()\n      });\n      sandbox.stub(errMiddleware4, 'execute');\n\n      app.then(middleware1);\n      app.then(middleware2);\n\n      app.catch(errMiddleware1);\n      app.catch(errMiddleware2);\n    });\n\n    it('should create a new Request object if the input is not a Request object', () => {\n      const mockRequest = sinon.stub();\n      const opts        = {};\n      App               = proxyquire('../lib/App', {\n        './Request' : mockRequest\n      });\n      app = new App();\n\n      app.processRequest(opts);\n      expect(mockRequest).to.have.been.calledOnce;\n      expect(mockRequest).to.have.been.calledWith(opts);\n    });\n\n    it('should return a promise', () => {\n      expect(Q.isPromise(app.processRequest(request))).to.be.true;\n    });\n\n    it('should create a new response object', () => {\n      const Response     = sinon.stub();\n      const mockResponse = {\n        pipe : sinon.spy()\n      };\n      Response.returns(mockResponse);\n      App                = proxyquire('../lib/App', {\n        './Response' : Response\n      });\n      app                = new App();\n\n      app.then(middleware1);\n      app.then(middleware2);\n\n      return app.processRequest(request).then(() => {\n        expect(Response).to.have.calledOnce;\n      });\n    });\n\n    it('should execute each route with request in the order declared', () => {\n      return app.processRequest(request).then(() => {\n        expect(middleware1.execute).to.have.been.calledOnce;\n        expect(middleware1.execute.firstCall.args[0].request).to.equal(request);\n        expect(middleware2.execute).to.have.been.calledOnce;\n        expect(middleware2.execute.firstCall.args[0].request).to.equal(request);\n\n        expect(middleware1.execute).to.have.been.calledBefore(middleware2.execute);\n      });\n    });\n\n    it('should not execute the second middleware before the first one completes', () => {\n      middleware1.execute.returnsPromise();\n      middleware1.execute.rejects(new Error());\n\n      return app.processRequest(request).catch(() => {\n        expect(middleware1.execute).to.have.been.called;\n        expect(middleware2.execute).to.not.have.been.called;\n      });\n    });\n\n    it('should not execute error middleware if all middleware resolves', () => {\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.execute).to.not.have.been.called;\n        expect(errMiddleware2.execute).to.not.have.been.called;\n      });\n    });\n\n    it('should resolve with the created response object', () => {\n      return app.processRequest(request).then((response) => {\n        expect(response).to.be.instanceof(Response);\n      });\n    });\n\n    it('should bail from the middleware stack if response.end is true', () => {\n      app.then(middleware3);\n      app.then(middleware4);\n      return app.processRequest(request).then(() => {\n        expect(middleware3.handler).to.have.been.calledOnce;\n        expect(middleware4.execute).to.not.have.been.calledOnce;\n      });\n    });\n\n    it('should bail from the error stack if response.end is true', () => {\n      const err = new Error('uhoh');\n      const err2 = new Error('ohno');\n      middleware1.execute.throws(err);\n      errMiddleware1.execute.throws(err2);\n      errMiddleware2.execute.throws(err2);\n      app.catch(errMiddleware3);\n      app.catch(errMiddleware4);\n\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware3.handler).to.have.been.calledOnce;\n        expect(errMiddleware4.execute).to.not.have.been.calledOnce;\n      });\n    });\n\n    it('should bail to the error stack if a middleware throws an error', () => {\n      const err = new Error('uhoh');\n      middleware1.execute.throws(err);\n\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware1.execute.firstCall.args[0].error).to.equal(err);\n        expect(errMiddleware2.execute).to.not.have.been.calledOnce;\n      });\n    });\n\n    it('should propagate down the error stack if a previous error middleware throws an error', () => {\n      const err1 = new Error('uhoh');\n      const err2 = new Error('ohno');\n      middleware1.execute.throws(err1);\n      errMiddleware1.execute.throws(err2);\n\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware1.execute.firstCall.args[0].error).to.equal(err1);\n        expect(errMiddleware2.execute).to.have.been.calledOnce;\n        expect(errMiddleware2.execute.firstCall.args[0].error).to.equal(err2);\n      });\n    });\n\n    it('should bail to the error stack if a middleware rejects with an error', () => {\n      const err = new Error('uhoh');\n      middleware1.execute.returnsPromise();\n      middleware1.execute.rejects(err);\n\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware1.execute.firstCall.args[0].error).to.equal(err);\n        expect(errMiddleware2.execute).to.not.have.been.calledOnce;\n      });\n    });\n\n    it('should propagate down the error stack if a previous error middleware rejects with an error', () => {\n      const err1 = new Error('uhoh');\n      const err2 = new Error('ohno');\n      middleware1.execute.throws(err1);\n      errMiddleware1.execute.returnsPromise();\n      errMiddleware1.execute.rejects(err2);\n\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware1.execute.firstCall.args[0].error).to.equal(err1);\n        expect(errMiddleware2.execute).to.have.been.calledOnce;\n        expect(errMiddleware2.execute.firstCall.args[0].error).to.equal(err2);\n      });\n    });\n\n    it('should not allow a path specific error middleware to swallow a valid error condition', () => {\n      app            = new App();\n\n      app.then(middleware1);\n      errMiddleware1 = new Route({\n        path    : '/a/b/c',\n        method  : 'get',\n        handler : sinon.spy()\n      });\n      app.catch(errMiddleware1);\n      app.catch(errMiddleware2);\n\n      const err1 = new Error('uhoh');\n      middleware1.execute.throws(err1);\n      return app.processRequest(request).then(() => {\n        expect(errMiddleware1.handler).to.not.have.been.called;\n        expect(errMiddleware2.execute).to.have.been.calledOnce;\n      });\n    });\n\n    it('should reject if all error middleware throw', () => {\n      const err1 = new Error('uhoh');\n      const err2 = new Error('ohno');\n      const err3 = new Error('nodearlord');\n      middleware1.execute.throws(err1);\n      errMiddleware1.execute.throws(err2);\n      errMiddleware2.execute.throws(err3);\n\n      return app.processRequest(request).catch((e) => {\n        expect(e).to.equal(err3);\n      });\n    });\n  });\n\n  describe('processRequest with middleware specific error handlers', () => {\n    let request;\n    let middleware1;\n    let middleware2;\n    let middleware3;\n    let middleware4;\n    let errMiddleware1;\n    let errMiddleware2;\n    let genericError;\n\n    beforeEach(() => {\n      request = new Request({\n        headers : {},\n        path    : '/a',\n        method  : 'get'\n      });\n\n      genericError = new Error('Something bad happened.');\n\n      middleware1 = sinon.createStubInstance(Route);\n      middleware2 = sinon.createStubInstance(Route);\n      middleware3 = sinon.createStubInstance(Route);\n      middleware4 = sinon.createStubInstance(Route);\n\n      errMiddleware1 = new Route({\n        handler : sinon.spy()\n      });\n      sandbox.stub(errMiddleware1, 'execute');\n      errMiddleware2 = new Route({\n        handler : sinon.spy()\n      });\n      sandbox.stub(errMiddleware2, 'execute');\n\n      app.then(middleware1);\n      app.then(middleware2);\n      app.then(middleware3);\n      app.catch(errMiddleware1);\n      app.catch(errMiddleware2);\n      app.then(middleware4);\n\n      middleware1.execute.returnsPromise();\n      errMiddleware1.execute.returnsPromise();\n      errMiddleware2.execute.returnsPromise();\n    });\n\n    it('no errors', () => {\n      return app.processRequest(request).then(() => {\n        expect(middleware1.execute).to.have.been.calledOnce;\n        expect(middleware2.execute).to.have.been.calledOnce;\n        expect(middleware3.execute).to.have.been.calledOnce;\n        expect(errMiddleware1.execute).to.not.have.been.called;\n        expect(errMiddleware2.execute).to.not.have.been.called;\n        expect(middleware4.execute).to.have.been.calledOnce;\n      });\n    });\n\n    it('early error that gets back on happy path', () => {\n      middleware1.execute.rejects(genericError);\n\n      return app.processRequest(request).then(() => {\n        expect(middleware1.execute).to.have.been.calledOnce;\n        expect(middleware2.execute).to.not.have.been.called;\n        expect(middleware3.execute).to.not.have.been.called;\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware2.execute).to.not.have.been.called;\n        expect(middleware4.execute).to.have.been.calledOnce;\n      });\n    });\n\n    it('early error that gets back on happy path after erroring in error chain', () => {\n      middleware1.execute.rejects(genericError);\n      errMiddleware1.execute.rejects(genericError);\n\n      return app.processRequest(request).then(() => {\n        expect(middleware1.execute).to.have.been.calledOnce;\n        expect(middleware2.execute).to.not.have.been.called;\n        expect(middleware3.execute).to.not.have.been.called;\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware2.execute).to.have.been.calledOnce;\n        expect(middleware4.execute).to.have.been.calledOnce;\n      });\n    });\n\n    it('should bubble up error if last error middleware throws error', () => {\n      middleware1.execute.rejects(genericError);\n      errMiddleware1.execute.rejects(genericError);\n      errMiddleware2.execute.rejects(genericError);\n\n      return app.processRequest(request).catch(() => {\n        expect(middleware1.execute).to.have.been.calledOnce;\n        expect(middleware2.execute).to.not.have.been.called;\n        expect(middleware3.execute).to.not.have.been.called;\n        expect(errMiddleware1.execute).to.have.been.calledOnce;\n        expect(errMiddleware2.execute).to.have.been.calledOnce;\n        expect(middleware4.execute).to.not.have.been.calledOnce;\n      });\n    });\n\n  });\n});\n"
  },
  {
    "__docId__": 209,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "test/App.test.js",
    "testDepth": 0,
    "longname": "test/App.test.js~describe0",
    "access": null,
    "description": "App",
    "lineNumber": 24
  },
  {
    "__docId__": 210,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe1",
    "testId": 1,
    "memberof": "test/App.test.js~describe0",
    "testDepth": 1,
    "longname": "test/App.test.js~describe0.describe1",
    "access": null,
    "description": "constructor",
    "lineNumber": 31
  },
  {
    "__docId__": 211,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe2",
    "testId": 2,
    "memberof": "test/App.test.js~describe0",
    "testDepth": 1,
    "longname": "test/App.test.js~describe0.describe2",
    "access": null,
    "description": "use",
    "lineNumber": 35
  },
  {
    "__docId__": 212,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "test/App.test.js~describe0.describe2",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe2.it3",
    "access": null,
    "description": "should run the input through the Route constructor if it is not a Route instance",
    "lineNumber": 47
  },
  {
    "__docId__": 213,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "test/App.test.js~describe0.describe2",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe2.it4",
    "access": null,
    "description": "should not run the input through the Route constructor if it is a Route instance",
    "lineNumber": 55
  },
  {
    "__docId__": 214,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "test/App.test.js~describe0.describe2",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe2.it5",
    "access": null,
    "description": "should accept a function input and use it as a route handler",
    "lineNumber": 63
  },
  {
    "__docId__": 215,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe6",
    "testId": 6,
    "memberof": "test/App.test.js~describe0",
    "testDepth": 1,
    "longname": "test/App.test.js~describe0.describe6",
    "access": null,
    "description": "useError",
    "lineNumber": 74
  },
  {
    "__docId__": 216,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "test/App.test.js~describe0.describe6",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe6.it7",
    "access": null,
    "description": "should run the input through the Route constructor if it is not a Route instance",
    "lineNumber": 86
  },
  {
    "__docId__": 217,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "test/App.test.js~describe0.describe6",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe6.it8",
    "access": null,
    "description": "should not run the input through the Route constructor if it is a Route instance",
    "lineNumber": 94
  },
  {
    "__docId__": 218,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "test/App.test.js~describe0.describe6",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe6.it9",
    "access": null,
    "description": "should accept a function input and use it as a route handler",
    "lineNumber": 102
  },
  {
    "__docId__": 219,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe10",
    "testId": 10,
    "memberof": "test/App.test.js~describe0",
    "testDepth": 1,
    "longname": "test/App.test.js~describe0.describe10",
    "access": null,
    "description": "processRequest",
    "lineNumber": 113
  },
  {
    "__docId__": 220,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it11",
    "access": null,
    "description": "should create a new Request object if the input is not a Request object",
    "lineNumber": 166
  },
  {
    "__docId__": 221,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it12",
    "access": null,
    "description": "should return a promise",
    "lineNumber": 179
  },
  {
    "__docId__": 222,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it13",
    "access": null,
    "description": "should create a new response object",
    "lineNumber": 183
  },
  {
    "__docId__": 223,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it14",
    "access": null,
    "description": "should execute each route with request in the order declared",
    "lineNumber": 202
  },
  {
    "__docId__": 224,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it15",
    "access": null,
    "description": "should not execute the second middleware before the first one completes",
    "lineNumber": 213
  },
  {
    "__docId__": 225,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it16",
    "access": null,
    "description": "should not execute error middleware if all middleware resolves",
    "lineNumber": 223
  },
  {
    "__docId__": 226,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it17",
    "access": null,
    "description": "should resolve with the created response object",
    "lineNumber": 230
  },
  {
    "__docId__": 227,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it18",
    "access": null,
    "description": "should bail from the middleware stack if response.end is true",
    "lineNumber": 236
  },
  {
    "__docId__": 228,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it19",
    "access": null,
    "description": "should bail from the error stack if response.end is true",
    "lineNumber": 245
  },
  {
    "__docId__": 229,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it20",
    "access": null,
    "description": "should bail to the error stack if a middleware throws an error",
    "lineNumber": 260
  },
  {
    "__docId__": 230,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it21",
    "testId": 21,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it21",
    "access": null,
    "description": "should propagate down the error stack if a previous error middleware throws an error",
    "lineNumber": 271
  },
  {
    "__docId__": 231,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it22",
    "access": null,
    "description": "should bail to the error stack if a middleware rejects with an error",
    "lineNumber": 285
  },
  {
    "__docId__": 232,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it23",
    "access": null,
    "description": "should propagate down the error stack if a previous error middleware rejects with an error",
    "lineNumber": 297
  },
  {
    "__docId__": 233,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it24",
    "access": null,
    "description": "should not allow a path specific error middleware to swallow a valid error condition",
    "lineNumber": 312
  },
  {
    "__docId__": 234,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "test/App.test.js~describe0.describe10",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe10.it25",
    "access": null,
    "description": "should reject if all error middleware throw",
    "lineNumber": 332
  },
  {
    "__docId__": 235,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe26",
    "testId": 26,
    "memberof": "test/App.test.js~describe0",
    "testDepth": 1,
    "longname": "test/App.test.js~describe0.describe26",
    "access": null,
    "description": "processRequest with middleware specific error handlers",
    "lineNumber": 346
  },
  {
    "__docId__": 236,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it27",
    "testId": 27,
    "memberof": "test/App.test.js~describe0.describe26",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe26.it27",
    "access": null,
    "description": "no errors",
    "lineNumber": 391
  },
  {
    "__docId__": 237,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "test/App.test.js~describe0.describe26",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe26.it28",
    "access": null,
    "description": "early error that gets back on happy path",
    "lineNumber": 402
  },
  {
    "__docId__": 238,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "test/App.test.js~describe0.describe26",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe26.it29",
    "access": null,
    "description": "early error that gets back on happy path after erroring in error chain",
    "lineNumber": 415
  },
  {
    "__docId__": 239,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "test/App.test.js~describe0.describe26",
    "testDepth": 2,
    "longname": "test/App.test.js~describe0.describe26.it30",
    "access": null,
    "description": "should bubble up error if last error middleware throws error",
    "lineNumber": 429
  },
  {
    "__docId__": 240,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/ContentNegotiation.test.js",
    "memberof": null,
    "longname": "test/ContentNegotiation.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst PassThrough       = require('stream').PassThrough;\nconst Transform         = require('stream').Transform;\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect = chai.expect;\n\nconst Request = require('./..').Request;\nconst Response = require('./..').Response;\nconst ContentNegotiation = require('./../lib/middleware/ContentNegotiation.js');\n\ndescribe('Content Negotiation Middleware', () => {\n  describe('exports', () => {\n    it('export a middleware function for request', () => {\n      expect(ContentNegotiation.request).to.be.a('function');\n    });\n\n    it('export a middleware function for response', () => {\n      expect(ContentNegotiation.response).to.be.a('function');\n    });\n  });\n\n  describe('request', () => {\n\n    let request;\n\n    describe('buffering', () => {\n      beforeEach(() => {\n        request = new Request({\n          path    : '/',\n          method  : 'get',\n          headers : {},\n          body    : new PassThrough()\n        });\n      });\n\n      it('if there is no Content-Type, it should try to parse as json and overwrite body', (done) => {\n        const requestData = { hello : 'world' };\n        request.body.end(JSON.stringify(requestData));\n        ContentNegotiation.request({ request }).then(() => {\n          expect(request.body).to.eql(requestData);\n          done();\n        });\n\n      });\n\n      it('should throw an error if parsing fails', () => {\n        request.body.end('this is not json');\n        return expect(ContentNegotiation.request({ request })).to.be.rejectedWith('InvalidJSON');\n      });\n\n      it('should set the body to {} if nothing is streamed in', (done) => {\n        request.body.end();\n        ContentNegotiation.request({ request }).then(() => {\n          expect(request.body).to.eql({});\n          done();\n        });\n\n      });\n\n    });\n    describe('non-buffering', () => {\n\n      beforeEach(() => {\n        const headers = {};\n        headers['Transfer-Encoding'] = 'chunked';\n        request = new Request({\n          path    : '/',\n          method  : 'get',\n          headers : headers,\n          body    : new PassThrough()\n        });\n      });\n\n      it('should do nothing to the response stream if content-type is multipart', (done) => {\n        request.body.end('chunked data');\n        ContentNegotiation.request({ request });\n        expect(request.body instanceof Transform).to.be.true;\n        request.body.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('chunked data');\n          done();\n        });\n      });\n\n    });\n\n  });\n\n  describe('response', () => {\n    let request;\n    let response;\n\n    beforeEach(() => {\n      request = new Request({\n        path    : '/',\n        method  : 'get',\n        headers : {},\n        body    : new PassThrough()\n      });\n\n      response = new Response();\n    });\n\n    describe('JSON', () => {\n      it('should treat the response body as JSON and write it as a new stream if no headers are present', (done) => {\n        response.setBody({ hello : 'world' });\n        ContentNegotiation.response({ request, response });\n        response.body.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('{\"hello\":\"world\"}');\n          expect(response.getHeader('content-type')).to.equal('application/json');\n          done();\n        });\n      });\n\n    });\n\n  });\n});\n"
  },
  {
    "__docId__": 241,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe31",
    "testId": 31,
    "memberof": "test/ContentNegotiation.test.js",
    "testDepth": 0,
    "longname": "test/ContentNegotiation.test.js~describe31",
    "access": null,
    "description": "Content Negotiation Middleware",
    "lineNumber": 20
  },
  {
    "__docId__": 242,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe32",
    "testId": 32,
    "memberof": "test/ContentNegotiation.test.js~describe31",
    "testDepth": 1,
    "longname": "test/ContentNegotiation.test.js~describe31.describe32",
    "access": null,
    "description": "exports",
    "lineNumber": 21
  },
  {
    "__docId__": 243,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe32",
    "testDepth": 2,
    "longname": "test/ContentNegotiation.test.js~describe31.describe32.it33",
    "access": null,
    "description": "export a middleware function for request",
    "lineNumber": 22
  },
  {
    "__docId__": 244,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe32",
    "testDepth": 2,
    "longname": "test/ContentNegotiation.test.js~describe31.describe32.it34",
    "access": null,
    "description": "export a middleware function for response",
    "lineNumber": 26
  },
  {
    "__docId__": 245,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe35",
    "testId": 35,
    "memberof": "test/ContentNegotiation.test.js~describe31",
    "testDepth": 1,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35",
    "access": null,
    "description": "request",
    "lineNumber": 31
  },
  {
    "__docId__": 246,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe36",
    "testId": 36,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35",
    "testDepth": 2,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe36",
    "access": null,
    "description": "buffering",
    "lineNumber": 35
  },
  {
    "__docId__": 247,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35.describe36",
    "testDepth": 3,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe36.it37",
    "access": null,
    "description": "if there is no Content-Type, it should try to parse as json and overwrite body",
    "lineNumber": 45
  },
  {
    "__docId__": 248,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35.describe36",
    "testDepth": 3,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe36.it38",
    "access": null,
    "description": "should throw an error if parsing fails",
    "lineNumber": 55
  },
  {
    "__docId__": 249,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35.describe36",
    "testDepth": 3,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe36.it39",
    "access": null,
    "description": "should set the body to {} if nothing is streamed in",
    "lineNumber": 60
  },
  {
    "__docId__": 250,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe40",
    "testId": 40,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35",
    "testDepth": 2,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe40",
    "access": null,
    "description": "non-buffering",
    "lineNumber": 70
  },
  {
    "__docId__": 251,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe35.describe40",
    "testDepth": 3,
    "longname": "test/ContentNegotiation.test.js~describe31.describe35.describe40.it41",
    "access": null,
    "description": "should do nothing to the response stream if content-type is multipart",
    "lineNumber": 83
  },
  {
    "__docId__": 252,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe42",
    "testId": 42,
    "memberof": "test/ContentNegotiation.test.js~describe31",
    "testDepth": 1,
    "longname": "test/ContentNegotiation.test.js~describe31.describe42",
    "access": null,
    "description": "response",
    "lineNumber": 97
  },
  {
    "__docId__": 253,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe43",
    "testId": 43,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe42",
    "testDepth": 2,
    "longname": "test/ContentNegotiation.test.js~describe31.describe42.describe43",
    "access": null,
    "description": "JSON",
    "lineNumber": 112
  },
  {
    "__docId__": 254,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it44",
    "testId": 44,
    "memberof": "test/ContentNegotiation.test.js~describe31.describe42.describe43",
    "testDepth": 3,
    "longname": "test/ContentNegotiation.test.js~describe31.describe42.describe43.it44",
    "access": null,
    "description": "should treat the response body as JSON and write it as a new stream if no headers are present",
    "lineNumber": 113
  },
  {
    "__docId__": 255,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/Node.test.js",
    "memberof": null,
    "longname": "test/Node.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst _                 = require('lodash');\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect = chai.expect;\n\nconst Node    = require('../lib/Node');\nconst Route   = require('../lib/Route');\nconst Request = require('../lib/Request');\nlet sandbox;\n\ndescribe('Node ', () => {\n  const OPTIONS_ERROR    = 'options must be an object.';\n  const PATH_ERROR       = 'path must be a string.';\n  const PATH_START_ERROR = 'path must start with a / character.';\n\n  beforeEach(() => {\n    sandbox = sinon.sandbox.create();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('constructor', () => {\n    it('should throw if options is undefined', () => {\n      expect(() => {\n        new Node();\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should throw if options is not an object', () => {\n      expect(() => {\n        new Node('asdf');\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should throw if options.path is undefined', () => {\n      expect(() => {\n        new Node({});\n      }).to.throw(PATH_ERROR);\n    });\n\n    it('should throw if options.path is not a string', () => {\n      expect(() => {\n        new Node({ path : 7 });\n      }).to.throw(PATH_ERROR);\n    });\n\n    it('should throw if path does not start with a / character', () => {\n      expect(() => {\n        new Node({ path : 'asdf' });\n      }).to.throw(PATH_START_ERROR);\n    });\n\n    it('should set the path property from the constructor', () => {\n      const node = new Node({ path : '/user' });\n      expect(node.path).to.equal('/user');\n    });\n\n    it('should throw on assignment to path', () => {\n      const node = new Node({ path : '/user' });\n      expect(() => {\n        node.path = '/asdfa';\n      }).to.throw('Cannot set property');\n    });\n\n    it('should add an options route', () => {\n      const node = new Node({ path : '/user' });\n      expect(node.getRoutes()).to.have.length(1);\n      const optsRoute = node.getRoutes()[0];\n      expect(optsRoute.methods).to.eql(['OPTIONS']);\n    });\n  });\n\n  describe('methods', () => {\n    let node;\n    let route;\n\n    beforeEach(() => {\n      route = {\n        path    : '/user',\n        methods : 'get',\n        handler : () => {\n\n        }\n      };\n      node  = new Node({ path : '/user' });\n    });\n\n    describe('#_optionsHandler', () => {\n\n    });\n\n    describe('#addRoute', () => {\n      it('should throw if the route path does not match the node path pattern', () => {\n\n      });\n\n      it('should throw if the path of the route does not match the path of the node', () => {\n        route.path = '/junk';\n        expect(() => {\n          node.addRoute(route);\n        }).to.throw('route path must match node path.');\n      });\n\n      it('should throw if the method is already defined for this node', () => {\n        node.addRoute(route);\n        expect(() => {\n          node.addRoute(route);\n        }).to.throw('duplicate method \"GET\" added for path \"/user\"');\n      });\n\n      it('should throw if the method is already defined using an array of methods for this node', () => {\n        route.methods = ['get', 'post'];\n        node.addRoute(route);\n        expect(() => {\n          route.methods = 'get';\n          node.addRoute(route);\n        }).to.throw('duplicate method \"GET\" added for path \"/user\"');\n      });\n\n      it('should throw if one of the methods in array is already defined for this node', () => {\n        node.addRoute(route);\n        expect(() => {\n          route.methods = ['get', 'post'];\n          node.addRoute(route);\n        }).to.throw('duplicate method \"GET\" added for path \"/user\"');\n      });\n\n      it('should throw if the route method is ALL', () => {\n        route.methods = '*';\n\n        expect(() => {\n          node.addRoute(route);\n        }).to.throw('cannot register route with method ALL on node.');\n      });\n    });\n\n    describe('#addChild', () => {\n\n      it('should be able to add children and be returned with getChildren', () => {\n        const child1 = new Node({ path : '/child1' });\n        const child2 = new Node({ path : '/child2' });\n        const child3 = new Node({ path : '/child3' });\n        node.addChild(child1);\n        node.addChild(child2);\n        node.addChild(child3);\n        expect(node.getChildren()).to.eql([child1, child2, child3]);\n      });\n\n      it('should throw an error if a child with a duplicate path is added', () => {\n        const child = new Node({ path : '/child' });\n        node.addChild(child);\n        expect(() => {\n          node.addChild(child);\n        }).to.throw(`Cannot add duplicate child on path ${child.path}`);\n      });\n\n    });\n\n    describe('tree walkers', () => {\n      let root, a, az, abc, abd;\n      beforeEach(() => {\n        root = new Node({ path : '/' });\n        a    = new Node({ path : '/a' });\n        abc  = new Node({ path : '/a/b/c' });\n        abd  = new Node({ path : '/a/b/d' });\n        az   = new Node({ path : '/a/z' });\n\n        root.addChild(a);\n        a.addChild(az);\n        a.addChild(abc);\n        a.addChild(abd);\n      });\n\n      describe('#insert', () => {\n\n        it('should throw an error if the route path is not contained in the nodes path', () => {\n          const route = new Route({\n            path    : '/',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n\n          expect(() => {\n            abc.insert(route);\n          }).to.throw('Cannot insert');\n        });\n\n        it('should throw an error if the node path does not start the route path', () => {\n          const route = new Route({\n            path    : '/b/c',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n\n          expect(() => {\n            abd.insert(route);\n          }).to.throw('Cannot insert');\n        });\n\n        it('should add the route to the node if the paths match', () => {\n          sandbox.spy(root, 'addRoute');\n          const route = new Route({\n            path    : '/',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          root.insert(route);\n\n          expect(root.addRoute).to.have.been.calledOnce;\n          expect(root.addRoute).to.have.been.calledWith(route);\n        });\n\n        it('should insert on a child node, if possible', () => {\n          const route = new Route({\n            path    : '/a/b/c/e',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          sinon.spy(a, 'insert');\n          sinon.spy(abc, 'insert');\n          sinon.spy(abd, 'insert');\n\n          root.insert(route);\n          expect(a.insert).to.have.been.calledWith(route);\n          expect(abc.insert).to.have.been.calledWith(route);\n          expect(abd.insert).to.not.have.been.calledWith(route);\n        });\n\n        it('should add a new child otherwise', () => {\n          const route   = new Route({\n            path    : '/a/b',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          sinon.spy(a, 'insert');\n          sinon.spy(a, 'addChild');\n\n          root.insert(route);\n          expect(a.insert).to.have.been.calledWith(route);\n          expect(a.addChild).to.have.been.calledOnce;\n          const newNode = a.addChild.firstCall.args[0];\n          expect(newNode.path).to.equal('/a/b');\n          expect(newNode.getRoutes()).to.contain(route);\n        });\n\n        it('should reassign children as needed', () => {\n          const route  = new Route({\n            path    : '/a/b',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n\n          root.insert(route);\n          expect(root.getChildren()).to.eql([a]);\n          const aChildren = a.getChildren();\n          expect(aChildren).to.have.length(2);\n          expect(aChildren).to.contain(az);\n          const ab = _.find(aChildren, (child) => {\n            return child !== az;\n          });\n          expect(ab.getChildren()).to.eql([abc, abd]);\n        });\n\n        it('should insert correctly on route patterns, regardless of param names', () => {\n          const node = new Node({ path : '/users/:id' });\n          const route1 = new Route({\n            path    : '/users/:id',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          const route2 = new Route({\n            path    : '/users/:userId',\n            methods : 'put',\n            handler : sinon.spy()\n          });\n          node.insert(route1);\n          node.insert(route2);\n\n          expect(node.getRoutes()).to.contain(route1);\n          expect(node.getRoutes()).to.contain(route2);\n        });\n      });\n\n\n      describe('#find', () => {\n        let rootGet, aGet;\n        beforeEach(() => {\n          rootGet = new Route({\n            path    : '/',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          root.addRoute(rootGet);\n\n          aGet = new Route({\n            path    : '/a',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n          a.addRoute(aGet);\n        });\n\n        it('should return a match from its routes, if it exists', () => {\n          const request = new Request({\n            path    : '/',\n            method  : 'get',\n            headers : {}\n          });\n\n          expect(root.find(request)).to.equal(rootGet);\n        });\n\n        it('should return undefined if request matches the path, but the route doesnt exist', () => {\n          const request = new Request({\n            path    : '/',\n            method  : 'post',\n            headers : {}\n          });\n\n          expect(() => {\n            root.find(request);\n          }).to.throw('Invalid method');\n        });\n\n        it('should return a match from its children', () => {\n          const request = new Request({\n            path    : '/a',\n            method  : 'get',\n            headers : {}\n          });\n\n          expect(root.find(request)).to.equal(aGet);\n        });\n      });\n\n      describe('#toObject', () => {\n\n      });\n    });\n  });\n});\n"
  },
  {
    "__docId__": 256,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe45",
    "testId": 45,
    "memberof": "test/Node.test.js",
    "testDepth": 0,
    "longname": "test/Node.test.js~describe45",
    "access": null,
    "description": "Node ",
    "lineNumber": 20
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe46",
    "testId": 46,
    "memberof": "test/Node.test.js~describe45",
    "testDepth": 1,
    "longname": "test/Node.test.js~describe45.describe46",
    "access": null,
    "description": "constructor",
    "lineNumber": 33
  },
  {
    "__docId__": 258,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it47",
    "access": null,
    "description": "should throw if options is undefined",
    "lineNumber": 34
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it48",
    "access": null,
    "description": "should throw if options is not an object",
    "lineNumber": 40
  },
  {
    "__docId__": 260,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it49",
    "access": null,
    "description": "should throw if options.path is undefined",
    "lineNumber": 46
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it50",
    "access": null,
    "description": "should throw if options.path is not a string",
    "lineNumber": 52
  },
  {
    "__docId__": 262,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it51",
    "access": null,
    "description": "should throw if path does not start with a / character",
    "lineNumber": 58
  },
  {
    "__docId__": 263,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it52",
    "access": null,
    "description": "should set the path property from the constructor",
    "lineNumber": 64
  },
  {
    "__docId__": 264,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it53",
    "access": null,
    "description": "should throw on assignment to path",
    "lineNumber": 69
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "test/Node.test.js~describe45.describe46",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe46.it54",
    "access": null,
    "description": "should add an options route",
    "lineNumber": 76
  },
  {
    "__docId__": 266,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe55",
    "testId": 55,
    "memberof": "test/Node.test.js~describe45",
    "testDepth": 1,
    "longname": "test/Node.test.js~describe45.describe55",
    "access": null,
    "description": "methods",
    "lineNumber": 84
  },
  {
    "__docId__": 267,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe56",
    "testId": 56,
    "memberof": "test/Node.test.js~describe45.describe55",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe55.describe56",
    "access": null,
    "description": "#_optionsHandler",
    "lineNumber": 99
  },
  {
    "__docId__": 268,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe57",
    "testId": 57,
    "memberof": "test/Node.test.js~describe45.describe55",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe55.describe57",
    "access": null,
    "description": "#addRoute",
    "lineNumber": 103
  },
  {
    "__docId__": 269,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it58",
    "access": null,
    "description": "should throw if the route path does not match the node path pattern",
    "lineNumber": 104
  },
  {
    "__docId__": 270,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it59",
    "access": null,
    "description": "should throw if the path of the route does not match the path of the node",
    "lineNumber": 108
  },
  {
    "__docId__": 271,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it60",
    "access": null,
    "description": "should throw if the method is already defined for this node",
    "lineNumber": 115
  },
  {
    "__docId__": 272,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it61",
    "testId": 61,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it61",
    "access": null,
    "description": "should throw if the method is already defined using an array of methods for this node",
    "lineNumber": 122
  },
  {
    "__docId__": 273,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it62",
    "access": null,
    "description": "should throw if one of the methods in array is already defined for this node",
    "lineNumber": 131
  },
  {
    "__docId__": 274,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "test/Node.test.js~describe45.describe55.describe57",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe57.it63",
    "access": null,
    "description": "should throw if the route method is ALL",
    "lineNumber": 139
  },
  {
    "__docId__": 275,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe64",
    "testId": 64,
    "memberof": "test/Node.test.js~describe45.describe55",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe55.describe64",
    "access": null,
    "description": "#addChild",
    "lineNumber": 148
  },
  {
    "__docId__": 276,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "test/Node.test.js~describe45.describe55.describe64",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe64.it65",
    "access": null,
    "description": "should be able to add children and be returned with getChildren",
    "lineNumber": 150
  },
  {
    "__docId__": 277,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "test/Node.test.js~describe45.describe55.describe64",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe64.it66",
    "access": null,
    "description": "should throw an error if a child with a duplicate path is added",
    "lineNumber": 160
  },
  {
    "__docId__": 278,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe67",
    "testId": 67,
    "memberof": "test/Node.test.js~describe45.describe55",
    "testDepth": 2,
    "longname": "test/Node.test.js~describe45.describe55.describe67",
    "access": null,
    "description": "tree walkers",
    "lineNumber": 170
  },
  {
    "__docId__": 279,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe68",
    "testId": 68,
    "memberof": "test/Node.test.js~describe45.describe55.describe67",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "access": null,
    "description": "#insert",
    "lineNumber": 185
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it69",
    "access": null,
    "description": "should throw an error if the route path is not contained in the nodes path",
    "lineNumber": 187
  },
  {
    "__docId__": 281,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it70",
    "access": null,
    "description": "should throw an error if the node path does not start the route path",
    "lineNumber": 199
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it71",
    "access": null,
    "description": "should add the route to the node if the paths match",
    "lineNumber": 211
  },
  {
    "__docId__": 283,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it72",
    "access": null,
    "description": "should insert on a child node, if possible",
    "lineNumber": 224
  },
  {
    "__docId__": 284,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it73",
    "access": null,
    "description": "should add a new child otherwise",
    "lineNumber": 240
  },
  {
    "__docId__": 285,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it74",
    "access": null,
    "description": "should reassign children as needed",
    "lineNumber": 257
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe68",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe68.it75",
    "access": null,
    "description": "should insert correctly on route patterns, regardless of param names",
    "lineNumber": 275
  },
  {
    "__docId__": 287,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe76",
    "testId": 76,
    "memberof": "test/Node.test.js~describe45.describe55.describe67",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe76",
    "access": null,
    "description": "#find",
    "lineNumber": 296
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe76",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe76.it77",
    "access": null,
    "description": "should return a match from its routes, if it exists",
    "lineNumber": 314
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe76",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe76.it78",
    "access": null,
    "description": "should return undefined if request matches the path, but the route doesnt exist",
    "lineNumber": 324
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it79",
    "testId": 79,
    "memberof": "test/Node.test.js~describe45.describe55.describe67.describe76",
    "testDepth": 4,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe76.it79",
    "access": null,
    "description": "should return a match from its children",
    "lineNumber": 336
  },
  {
    "__docId__": 291,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe80",
    "testId": 80,
    "memberof": "test/Node.test.js~describe45.describe55.describe67",
    "testDepth": 3,
    "longname": "test/Node.test.js~describe45.describe55.describe67.describe80",
    "access": null,
    "description": "#toObject",
    "lineNumber": 347
  },
  {
    "__docId__": 292,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/Request.test.js",
    "memberof": null,
    "longname": "test/Request.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect = chai.expect;\n\nconst Request = require('./..').Request;\nlet request;\n\ndescribe('Request', () => {\n\n  describe('constructor', () => {\n    const OPTIONS_ERROR = 'options must be an object.';\n    const HEADERS_ERROR = 'headers must be an object.';\n    const PATH_ERROR    = 'path must be a string.';\n    const METHOD_ERROR  = 'method must be a valid method string.';\n    const BODY_ERROR    = 'body must be a readable stream.';\n\n    it('should throw if options is undefined', () => {\n      expect(() => {\n        new Request();\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should throw if options is not an object', () => {\n      expect(() => {\n        new Request('asdf');\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should not throw if options.headers is undefined', () => {\n      expect(() => {\n        new Request({});\n      }).to.not.throw(HEADERS_ERROR);\n    });\n\n    it('should throw if options.headers is defined and not an object', () => {\n      expect(() => {\n        new Request({ headers : 'asdf' });\n      }).to.throw(HEADERS_ERROR);\n    });\n\n    it('should throw if options.path is undefined', () => {\n      expect(() => {\n        new Request({ headers : {} });\n      }).to.throw(PATH_ERROR);\n    });\n\n    it('should throw if options.path is not a string', () => {\n      expect(() => {\n        new Request({ headers : {}, path : 7 });\n      }).to.throw(PATH_ERROR);\n    });\n\n    it('should throw if options.method is undefined', () => {\n      expect(() => {\n        new Request({ headers : {}, path : '/' });\n      }).to.throw(METHOD_ERROR);\n    });\n\n    it('should throw if options.method is not a string', () => {\n      expect(() => {\n        new Request({ headers : {}, path : '/', method : 7 });\n      }).to.throw(METHOD_ERROR);\n    });\n\n    it('should throw if options.method is not an allowed method value', () => {\n      expect(() => {\n        new Request({ headers : {}, path : '/', method : 'heart!' });\n      }).to.throw(METHOD_ERROR);\n    });\n\n    it('should not throw if options.body is undefined', () => {\n      expect(() => {\n        new Request({ headers : {}, path : '/', method : 'get' });\n      }).to.not.throw();\n    });\n\n    it('should throw if options.body is defined but not a readable stream', () => {\n      expect(() => {\n        new Request({ headers : {}, path : '/', method : 'get', body : 'asdf' });\n      }).to.throw(BODY_ERROR);\n    });\n\n    it('should allow arbitrary properties from constructor', () => {\n      const request = new Request({ headers : {}, path : '/', method : 'get', a : 1 });\n      expect(request.a).to.equal(1);\n    });\n\n    it('should allow construction from an existing request instance', () => {\n      const req1 = new Request({ headers : { 'b' : 'c' }, path : '/', method : 'get', a : 1 });\n      const req2 = new Request(req1);\n\n      expect(req2.headers).to.eql({ 'b' : 'c' });\n      expect(req2.path).to.equal('/');\n      expect(req2.method).to.equal('GET');\n      expect(req2.a).to.equal(1);\n    });\n  });\n\n  describe('properties', () => {\n    beforeEach(() => {\n      request = new Request({\n        headers : {\n          hello : 'world',\n          HeY   : 'BuDdY'\n        },\n        path   : '/',\n        method : 'get'\n      });\n    });\n\n    it('should set properties based on constructed values', () => {\n      expect(request.getHeader('hello')).to.equal('world');\n      expect(request.path).to.equal('/');\n      expect(request.method).to.equal('GET');\n    });\n\n    it('should defensively copy to protect itself from upstream changes on the headers object', () => {\n      const headers = {};\n      request       = new Request({\n        headers : headers,\n        path    : '/',\n        method  : 'get'\n      });\n\n      headers.a = 1;\n\n      expect(request.getHeader('a')).to.eql(undefined);\n    });\n\n    it('should throw if an invalid path is set', () => {\n      expect(() => {\n        request.path = 7;\n      }).to.throw('path must be a string.');\n    });\n\n    it('should normalize path when set', () => {\n      request.path = '/WoNkY/';\n      expect(request.path).to.equal('/wonky');\n    });\n\n    it('should throw if an invalid method is set', () => {\n      expect(() => {\n        request.method = 'adsf';\n      }).to.throw('method must be a valid method string.');\n    });\n\n    it('should normalize method when set', () => {\n      request.method = 'get';\n      expect(request.method).to.equal('GET');\n    });\n\n    it('should expose an originalPath property', () => {\n      expect(request.originalPath).to.exist;\n    });\n\n    it('should throw on assignment to originalPath', () => {\n      expect(() => {\n        request.originalPath = '/asdf';\n      }).to.throw('Cannot set property');\n    });\n\n    it('should initialize originalPath to the value of path', () => {\n      expect(request.originalPath).to.equal('/');\n    });\n\n    it('should initialize originalPath to the input originalPath, if provided', () => {\n      request.path = '/a/b/c';\n      const newReq = new Request(request);\n      expect(newReq.originalPath).to.equal('/');\n    });\n\n    it('should allow the body property to be overwritten', () => {\n      request.body = { hello : 'world' };\n      expect(request.body).to.eql({ hello : 'world' });\n    });\n\n    it('should allow assignment of arbitrary properties', () => {\n      request.asdf = {};\n      expect(request.asdf).to.eql({});\n    });\n\n    it('getting headers should not be case sensitive', () => {\n      expect(request.getHeader('HeLlO')).to.equal('world');\n    });\n\n    it('header values case should be preserved', () => {\n      expect(request.getHeader('hey')).to.equal('BuDdY');\n    });\n\n  });\n\n  describe('#toString', () => {\n    it('should include method, path, headers, and body', () => {\n      request = new Request({\n        headers : {\n          hello : 'world',\n        },\n        path   : '/a/b/c',\n        method : 'get'\n      });\n      request.body = {\n        a : 1,\n        b : 2\n      };\n      expect(request.toString().replace(/\\s+/g, '')).to.eql('Request:{\"method\":\"GET\",\"path\":\"/a/b/c\",\"headers\":{\"hello\":\"world\"},\"body\":{\"a\":1,\"b\":2}}');\n    });\n\n    it('should strip out all but the last 4 chars of the auth header', () => {\n      request = new Request({\n        headers : {\n          hello : 'world',\n          authorization : 'abcdefghijklmnopqrstuvwxyz'\n        },\n        path   : '/a/b/c',\n        method : 'get'\n      });\n      request.body = {};\n      expect(request.toString().replace(/\\s+/g, '')).to.eql('Request:{\"method\":\"GET\",\"path\":\"/a/b/c\",\"headers\":{\"hello\":\"world\",\"authorization\":\"...wxyz\"},\"body\":{}}');\n      expect(request.headers.authorization).to.equal('abcdefghijklmnopqrstuvwxyz'); // make sure it didn't modify\n\n    });\n\n  });\n\n  describe('streaming body', () => {\n    beforeEach(() => {\n      request = new Request({ path : '/', method : 'get' });\n    });\n\n    it('should be an instance of transform stream', () => {\n      expect(request.body).to.be.instanceof(require('stream').Transform);\n    });\n\n    it('should be readable and writable', (done) => {\n      const PassThrough = require('stream').PassThrough;\n      const inStream    = new PassThrough();\n      const outStream   = new PassThrough();\n\n      inStream.pipe(request.body).pipe(outStream);\n\n      inStream.end('hello world');\n      outStream.on('data', (chunk) => {\n        expect(chunk.toString()).to.equal('hello world');\n        done();\n      });\n    });\n  });\n\n});\n"
  },
  {
    "__docId__": 293,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe81",
    "testId": 81,
    "memberof": "test/Request.test.js",
    "testDepth": 0,
    "longname": "test/Request.test.js~describe81",
    "access": null,
    "description": "Request",
    "lineNumber": 17
  },
  {
    "__docId__": 294,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe82",
    "testId": 82,
    "memberof": "test/Request.test.js~describe81",
    "testDepth": 1,
    "longname": "test/Request.test.js~describe81.describe82",
    "access": null,
    "description": "constructor",
    "lineNumber": 19
  },
  {
    "__docId__": 295,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it83",
    "testId": 83,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it83",
    "access": null,
    "description": "should throw if options is undefined",
    "lineNumber": 26
  },
  {
    "__docId__": 296,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it84",
    "access": null,
    "description": "should throw if options is not an object",
    "lineNumber": 32
  },
  {
    "__docId__": 297,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it85",
    "access": null,
    "description": "should not throw if options.headers is undefined",
    "lineNumber": 38
  },
  {
    "__docId__": 298,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it86",
    "testId": 86,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it86",
    "access": null,
    "description": "should throw if options.headers is defined and not an object",
    "lineNumber": 44
  },
  {
    "__docId__": 299,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it87",
    "testId": 87,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it87",
    "access": null,
    "description": "should throw if options.path is undefined",
    "lineNumber": 50
  },
  {
    "__docId__": 300,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it88",
    "testId": 88,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it88",
    "access": null,
    "description": "should throw if options.path is not a string",
    "lineNumber": 56
  },
  {
    "__docId__": 301,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it89",
    "testId": 89,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it89",
    "access": null,
    "description": "should throw if options.method is undefined",
    "lineNumber": 62
  },
  {
    "__docId__": 302,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it90",
    "testId": 90,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it90",
    "access": null,
    "description": "should throw if options.method is not a string",
    "lineNumber": 68
  },
  {
    "__docId__": 303,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it91",
    "testId": 91,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it91",
    "access": null,
    "description": "should throw if options.method is not an allowed method value",
    "lineNumber": 74
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it92",
    "testId": 92,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it92",
    "access": null,
    "description": "should not throw if options.body is undefined",
    "lineNumber": 80
  },
  {
    "__docId__": 305,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it93",
    "testId": 93,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it93",
    "access": null,
    "description": "should throw if options.body is defined but not a readable stream",
    "lineNumber": 86
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it94",
    "access": null,
    "description": "should allow arbitrary properties from constructor",
    "lineNumber": 92
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it95",
    "testId": 95,
    "memberof": "test/Request.test.js~describe81.describe82",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe82.it95",
    "access": null,
    "description": "should allow construction from an existing request instance",
    "lineNumber": 97
  },
  {
    "__docId__": 308,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe96",
    "testId": 96,
    "memberof": "test/Request.test.js~describe81",
    "testDepth": 1,
    "longname": "test/Request.test.js~describe81.describe96",
    "access": null,
    "description": "properties",
    "lineNumber": 108
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it97",
    "testId": 97,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it97",
    "access": null,
    "description": "should set properties based on constructed values",
    "lineNumber": 120
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it98",
    "testId": 98,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it98",
    "access": null,
    "description": "should defensively copy to protect itself from upstream changes on the headers object",
    "lineNumber": 126
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it99",
    "testId": 99,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it99",
    "access": null,
    "description": "should throw if an invalid path is set",
    "lineNumber": 139
  },
  {
    "__docId__": 312,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it100",
    "testId": 100,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it100",
    "access": null,
    "description": "should normalize path when set",
    "lineNumber": 145
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it101",
    "access": null,
    "description": "should throw if an invalid method is set",
    "lineNumber": 150
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it102",
    "testId": 102,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it102",
    "access": null,
    "description": "should normalize method when set",
    "lineNumber": 156
  },
  {
    "__docId__": 315,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it103",
    "testId": 103,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it103",
    "access": null,
    "description": "should expose an originalPath property",
    "lineNumber": 161
  },
  {
    "__docId__": 316,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it104",
    "testId": 104,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it104",
    "access": null,
    "description": "should throw on assignment to originalPath",
    "lineNumber": 165
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it105",
    "testId": 105,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it105",
    "access": null,
    "description": "should initialize originalPath to the value of path",
    "lineNumber": 171
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it106",
    "testId": 106,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it106",
    "access": null,
    "description": "should initialize originalPath to the input originalPath, if provided",
    "lineNumber": 175
  },
  {
    "__docId__": 319,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it107",
    "testId": 107,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it107",
    "access": null,
    "description": "should allow the body property to be overwritten",
    "lineNumber": 181
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it108",
    "testId": 108,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it108",
    "access": null,
    "description": "should allow assignment of arbitrary properties",
    "lineNumber": 186
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it109",
    "access": null,
    "description": "getting headers should not be case sensitive",
    "lineNumber": 191
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it110",
    "testId": 110,
    "memberof": "test/Request.test.js~describe81.describe96",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe96.it110",
    "access": null,
    "description": "header values case should be preserved",
    "lineNumber": 195
  },
  {
    "__docId__": 323,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe111",
    "testId": 111,
    "memberof": "test/Request.test.js~describe81",
    "testDepth": 1,
    "longname": "test/Request.test.js~describe81.describe111",
    "access": null,
    "description": "#toString",
    "lineNumber": 201
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "test/Request.test.js~describe81.describe111",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe111.it112",
    "access": null,
    "description": "should include method, path, headers, and body",
    "lineNumber": 202
  },
  {
    "__docId__": 325,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it113",
    "testId": 113,
    "memberof": "test/Request.test.js~describe81.describe111",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe111.it113",
    "access": null,
    "description": "should strip out all but the last 4 chars of the auth header",
    "lineNumber": 217
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe114",
    "testId": 114,
    "memberof": "test/Request.test.js~describe81",
    "testDepth": 1,
    "longname": "test/Request.test.js~describe81.describe114",
    "access": null,
    "description": "streaming body",
    "lineNumber": 234
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it115",
    "testId": 115,
    "memberof": "test/Request.test.js~describe81.describe114",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe114.it115",
    "access": null,
    "description": "should be an instance of transform stream",
    "lineNumber": 239
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it116",
    "testId": 116,
    "memberof": "test/Request.test.js~describe81.describe114",
    "testDepth": 2,
    "longname": "test/Request.test.js~describe81.describe114.it116",
    "access": null,
    "description": "should be readable and writable",
    "lineNumber": 243
  },
  {
    "__docId__": 329,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/Response.test.js",
    "memberof": null,
    "longname": "test/Response.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst PassThrough       = require('stream').PassThrough;\nconst Transform         = require('stream').Transform;\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect = chai.expect;\n\nconst Response = require('./..').Response;\nlet response;\n\ndescribe('Response', () => {\n\n  beforeEach(() => {\n    response = new Response();\n  });\n\n  describe('statusCode', () => {\n    it('should default to 200', () => {\n      expect(response.statusCode).to.equal(200);\n    });\n\n    it('should throw an error if assigned a non-numeric value', () => {\n      expect(() => {\n        response.statusCode = 'asdf';\n      }).to.throw('statusCode must be a number.');\n    });\n\n    it('should be assignable', () => {\n      response.statusCode = 500;\n      expect(response.statusCode).to.equal(500);\n    });\n  });\n\n  describe('headers', () => {\n    it('should return undefined for an undefined header', () => {\n      expect(response.getHeader('asdf')).to.be.undefined;\n    });\n\n    it('should throw if set key is not defined', () => {\n      expect(() => {\n        response.setHeader();\n      }).to.throw('First argument: key must be a string.');\n    });\n\n    it('should throw if set key is not a string', () => {\n      expect(() => {\n        response.setHeader(7);\n      }).to.throw('First argument: key must be a string.');\n    });\n\n    it('should throw if set value is not defined', () => {\n      expect(() => {\n        response.setHeader('Content-Type');\n      }).to.throw('Second argument: value must be a string.');\n    });\n\n    it('should throw if set value is not a string', () => {\n      expect(() => {\n        response.setHeader('Content-Type', 7);\n      }).to.throw('Second argument: value must be a string.');\n    });\n\n    it('should be settable', () => {\n      response.setHeader('Content-Type', 'application/json');\n      expect(response.getHeader('Content-Type')).to.equal('application/json');\n    });\n\n    it('should allow clearing of headers', () => {\n      response.setHeader('Content-Type', 'application/json');\n      expect(response.getHeader('Content-Type')).to.equal('application/json');\n      response.clearHeader('Content-Type');\n      expect(response.getHeader('Content-Type')).to.be.undefined;\n    });\n  });\n\n  describe('body', () => {\n    let inStream;\n    let outStream;\n\n    beforeEach(() => {\n      inStream  = new PassThrough();\n      outStream = new PassThrough();\n    });\n\n    describe('property', () => {\n      beforeEach(() => {\n        inStream.pipe(response.body).pipe(outStream);\n      });\n\n      it('should extend Transform stream', () => {\n        expect(response.body).to.be.instanceof(Transform);\n      });\n\n      it('should be readable and writable', (done) => {\n        inStream.end('hello world');\n        outStream.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('hello world');\n          done();\n        });\n      });\n\n      it('should throw if you assign to body', () => {\n        expect(() => {\n          response.body = 'asdf';\n        }).to.throw('Cannot set property');\n      });\n    });\n\n    describe('#setBody', () => {\n\n      it('should pipe if the input is a readable stream', (done) => {\n        inStream.end('hello world');\n\n        response.setBody(inStream);\n        response.body.pipe(outStream);\n\n        outStream.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('hello world');\n          done();\n        });\n      });\n\n      it('should .end to itself with the input value otherwise', (done) => {\n        response.setBody('goodbye cruel world');\n        response.body.pipe(outStream);\n\n        outStream.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('goodbye cruel world');\n          done();\n        });\n      });\n\n      it('should break piping from previous sources', (done) => {\n        inStream.end('hello world');\n        inStream.pipe(response.body);\n\n        response.setBody('goodbye cruel world');\n        response.body.pipe(outStream);\n\n        outStream.on('data', (chunk) => {\n          expect(chunk.toString()).to.equal('goodbye cruel world');\n          done();\n        });\n      });\n    });\n\n    describe('#getBody', () => {\n      it('should return a reference to the body stream after construction', () => {\n        response = new Response();\n\n        expect(response.getBody()).to.equal(response.body);\n      });\n\n      it('should return a reference to the body stream after we setBody to a readable stream ', () => {\n        response.setBody(inStream);\n        expect(response.getBody()).to.equal(response.body);\n      });\n\n      it('should return a reference to the assigned value if we setBody to a non-stream value', () => {\n        response.setBody('hello world');\n        expect(response.getBody()).to.equal('hello world');\n      });\n    });\n  });\n\n  describe('#toString', () => {\n    it('should include statusCode, headers, and body', () => {\n      response.setHeader('hello', 'world');\n      response.setBody('hi');\n      response.statusCode = 222;\n      expect(response.toString().replace(/\\s+/g, '')).to.equal('Response:{\"statusCode\":222,\"headers\":{\"hello\":\"world\"},\"body\":\"hi\"}');\n    });\n\n  });\n\n  describe('ended', () => {\n    beforeEach(() => {\n      response = new Response();\n    });\n    it('should default the value to false', () => {\n      expect(response.ended).to.be.false;\n    });\n\n    it('should be set to true when setEnd is called', () => {\n      response.end();\n      expect(response.ended).to.be.true;\n    });\n  });\n\n\n});\n"
  },
  {
    "__docId__": 330,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe117",
    "testId": 117,
    "memberof": "test/Response.test.js",
    "testDepth": 0,
    "longname": "test/Response.test.js~describe117",
    "access": null,
    "description": "Response",
    "lineNumber": 19
  },
  {
    "__docId__": 331,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe118",
    "testId": 118,
    "memberof": "test/Response.test.js~describe117",
    "testDepth": 1,
    "longname": "test/Response.test.js~describe117.describe118",
    "access": null,
    "description": "statusCode",
    "lineNumber": 25
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it119",
    "testId": 119,
    "memberof": "test/Response.test.js~describe117.describe118",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe118.it119",
    "access": null,
    "description": "should default to 200",
    "lineNumber": 26
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it120",
    "testId": 120,
    "memberof": "test/Response.test.js~describe117.describe118",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe118.it120",
    "access": null,
    "description": "should throw an error if assigned a non-numeric value",
    "lineNumber": 30
  },
  {
    "__docId__": 334,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it121",
    "testId": 121,
    "memberof": "test/Response.test.js~describe117.describe118",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe118.it121",
    "access": null,
    "description": "should be assignable",
    "lineNumber": 36
  },
  {
    "__docId__": 335,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe122",
    "testId": 122,
    "memberof": "test/Response.test.js~describe117",
    "testDepth": 1,
    "longname": "test/Response.test.js~describe117.describe122",
    "access": null,
    "description": "headers",
    "lineNumber": 42
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it123",
    "testId": 123,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it123",
    "access": null,
    "description": "should return undefined for an undefined header",
    "lineNumber": 43
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it124",
    "testId": 124,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it124",
    "access": null,
    "description": "should throw if set key is not defined",
    "lineNumber": 47
  },
  {
    "__docId__": 338,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it125",
    "testId": 125,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it125",
    "access": null,
    "description": "should throw if set key is not a string",
    "lineNumber": 53
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it126",
    "testId": 126,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it126",
    "access": null,
    "description": "should throw if set value is not defined",
    "lineNumber": 59
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it127",
    "testId": 127,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it127",
    "access": null,
    "description": "should throw if set value is not a string",
    "lineNumber": 65
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it128",
    "testId": 128,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it128",
    "access": null,
    "description": "should be settable",
    "lineNumber": 71
  },
  {
    "__docId__": 342,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it129",
    "testId": 129,
    "memberof": "test/Response.test.js~describe117.describe122",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe122.it129",
    "access": null,
    "description": "should allow clearing of headers",
    "lineNumber": 76
  },
  {
    "__docId__": 343,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe130",
    "testId": 130,
    "memberof": "test/Response.test.js~describe117",
    "testDepth": 1,
    "longname": "test/Response.test.js~describe117.describe130",
    "access": null,
    "description": "body",
    "lineNumber": 84
  },
  {
    "__docId__": 344,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe131",
    "testId": 131,
    "memberof": "test/Response.test.js~describe117.describe130",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe130.describe131",
    "access": null,
    "description": "property",
    "lineNumber": 93
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it132",
    "testId": 132,
    "memberof": "test/Response.test.js~describe117.describe130.describe131",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe131.it132",
    "access": null,
    "description": "should extend Transform stream",
    "lineNumber": 98
  },
  {
    "__docId__": 346,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it133",
    "testId": 133,
    "memberof": "test/Response.test.js~describe117.describe130.describe131",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe131.it133",
    "access": null,
    "description": "should be readable and writable",
    "lineNumber": 102
  },
  {
    "__docId__": 347,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it134",
    "testId": 134,
    "memberof": "test/Response.test.js~describe117.describe130.describe131",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe131.it134",
    "access": null,
    "description": "should throw if you assign to body",
    "lineNumber": 110
  },
  {
    "__docId__": 348,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe135",
    "testId": 135,
    "memberof": "test/Response.test.js~describe117.describe130",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe130.describe135",
    "access": null,
    "description": "#setBody",
    "lineNumber": 117
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it136",
    "testId": 136,
    "memberof": "test/Response.test.js~describe117.describe130.describe135",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe135.it136",
    "access": null,
    "description": "should pipe if the input is a readable stream",
    "lineNumber": 119
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it137",
    "testId": 137,
    "memberof": "test/Response.test.js~describe117.describe130.describe135",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe135.it137",
    "access": null,
    "description": "should .end to itself with the input value otherwise",
    "lineNumber": 131
  },
  {
    "__docId__": 351,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it138",
    "testId": 138,
    "memberof": "test/Response.test.js~describe117.describe130.describe135",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe135.it138",
    "access": null,
    "description": "should break piping from previous sources",
    "lineNumber": 141
  },
  {
    "__docId__": 352,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe139",
    "testId": 139,
    "memberof": "test/Response.test.js~describe117.describe130",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe130.describe139",
    "access": null,
    "description": "#getBody",
    "lineNumber": 155
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it140",
    "testId": 140,
    "memberof": "test/Response.test.js~describe117.describe130.describe139",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe139.it140",
    "access": null,
    "description": "should return a reference to the body stream after construction",
    "lineNumber": 156
  },
  {
    "__docId__": 354,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it141",
    "testId": 141,
    "memberof": "test/Response.test.js~describe117.describe130.describe139",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe139.it141",
    "access": null,
    "description": "should return a reference to the body stream after we setBody to a readable stream ",
    "lineNumber": 162
  },
  {
    "__docId__": 355,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it142",
    "testId": 142,
    "memberof": "test/Response.test.js~describe117.describe130.describe139",
    "testDepth": 3,
    "longname": "test/Response.test.js~describe117.describe130.describe139.it142",
    "access": null,
    "description": "should return a reference to the assigned value if we setBody to a non-stream value",
    "lineNumber": 167
  },
  {
    "__docId__": 356,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe143",
    "testId": 143,
    "memberof": "test/Response.test.js~describe117",
    "testDepth": 1,
    "longname": "test/Response.test.js~describe117.describe143",
    "access": null,
    "description": "#toString",
    "lineNumber": 174
  },
  {
    "__docId__": 357,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it144",
    "testId": 144,
    "memberof": "test/Response.test.js~describe117.describe143",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe143.it144",
    "access": null,
    "description": "should include statusCode, headers, and body",
    "lineNumber": 175
  },
  {
    "__docId__": 358,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe145",
    "testId": 145,
    "memberof": "test/Response.test.js~describe117",
    "testDepth": 1,
    "longname": "test/Response.test.js~describe117.describe145",
    "access": null,
    "description": "ended",
    "lineNumber": 184
  },
  {
    "__docId__": 359,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it146",
    "testId": 146,
    "memberof": "test/Response.test.js~describe117.describe145",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe145.it146",
    "access": null,
    "description": "should default the value to false",
    "lineNumber": 188
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it147",
    "testId": 147,
    "memberof": "test/Response.test.js~describe117.describe145",
    "testDepth": 2,
    "longname": "test/Response.test.js~describe117.describe145.it147",
    "access": null,
    "description": "should be set to true when setEnd is called",
    "lineNumber": 192
  },
  {
    "__docId__": 361,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/Route.test.js",
    "memberof": null,
    "longname": "test/Route.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst _                 = require('lodash');\nconst Q                 = require('q');\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect = chai.expect;\n\nconst Route    = require('../lib/Route');\nconst Request  = require('../lib/Request');\nconst Response = require('../lib/Response');\n\ndescribe('A Route', () => {\n  let opts;\n  let route;\n  let handler;\n\n  beforeEach(() => {\n    handler = sinon.stub();\n    opts    = { path : '/', methods : 'GET', handler : handler };\n    route   = new Route(opts);\n  });\n\n  describe('constructor', () => {\n    const OPTIONS_ERROR = 'options must be an object.';\n    const PATH_ERROR    = 'path must be a string.';\n    const METHOD_ERROR  = 'method must be a valid method string.';\n    const HANDLER_ERROR = 'handler must be a function.';\n    const ERROR_HANDLER_ERROR = 'errorHandler must be a function.';\n\n    it('should throw if options is undefined', () => {\n      expect(() => {\n        new Route();\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should throw if options is not an object', () => {\n      expect(() => {\n        new Route('asdf');\n      }).to.throw(OPTIONS_ERROR);\n    });\n\n    it('should throw if handler is not defined;', () => {\n      expect(() => {\n        new Route({});\n      }).to.throw(HANDLER_ERROR);\n    });\n\n    it('should throw if handler is not a function', () => {\n      expect(() => {\n        new Route({ handler : 'asdf' });\n      }).to.throw(HANDLER_ERROR);\n    });\n\n    it('should throw if error handler is provided but not a function', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy(), errorHandler : 'whatever' });\n      }).to.throw(ERROR_HANDLER_ERROR);\n    });\n\n    it('should not throw if error handler is not provided', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy() });\n      }).to.not.throw();\n    });\n\n    it('should not throw if options.path is undefined', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy() });\n      }).to.not.throw();\n    });\n\n    it('should throw if options.path is not a string', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy(), path : 7 });\n      }).to.throw(PATH_ERROR);\n    });\n\n    it('should not throw if options.methods is undefined', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy() });\n      }).to.not.throw();\n    });\n\n    it('should throw if options.methods is not a string', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy(), methods : 7 });\n      }).to.throw(METHOD_ERROR);\n    });\n\n    it('should throw if options.methods is not an allowed method value', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy(), methods : 'heart!' });\n      }).to.throw(METHOD_ERROR);\n    });\n\n    it('should throw if options.methods contains a method value in the array that is not allowed', () => {\n      expect(() => {\n        new Route({ handler : sinon.spy(), methods : ['GET', 'heart!'] });\n      }).to.throw(METHOD_ERROR);\n    });\n\n  });\n\n  describe('properties', () => {\n    _.each(['path', 'methods', 'handler'], (propertyName) => {\n      it(`should set property ${propertyName} from constructor`, () => {\n        let shouldEqual;\n        if (propertyName === 'methods') {\n          shouldEqual = [];\n          if (_.isArray(opts[propertyName])) {\n            shouldEqual = opts[propertyName];\n          }\n          else {\n            shouldEqual.push(opts[propertyName]);\n          }\n        }\n        else {\n          shouldEqual = opts[propertyName];\n        }\n        expect(route[propertyName]).to.eql(shouldEqual);\n      });\n\n      it(`should throw on assignment to ${propertyName}`, () => {\n        expect(() => {\n          route[propertyName] = 'a';\n        }).to.throw('Cannot set property');\n      });\n    });\n\n    it('should normalize root path', () => {\n      route = new Route({ path : '/', methods : 'get', handler : handler });\n      expect(route.path).to.equal('/');\n    });\n\n    it('should normalize trailing slashes', () => {\n      route = new Route({ path : '/a/b/c/', methods : 'get', handler : handler });\n      expect(route.path).to.equal('/a/b/c');\n    });\n\n    it('should normalize trailing slashes', () => {\n      route = new Route({ path : '/a/b/c', methods : 'get', handler : handler });\n      expect(route.path).to.equal('/a/b/c');\n    });\n\n    it('should lowercase path parts that are NOT route params', () => {\n      route = new Route({ path : '/CaSes/:caseId/THINg', methods : 'get', handler : handler });\n      expect(route.path).to.equal('/cases/:caseId/thing');\n    });\n\n    it('should normalize method name', () => {\n      route = new Route({ path : '/a/b/c', methods : 'GeT', handler : handler });\n      expect(route.methods).to.eql(['GET']);\n    });\n\n    it('should turn a single method into an array', () => {\n      route = new Route({ path : '/a/b/c', methods : 'GET', handler : handler });\n      expect(route.methods).to.eql(['GET']);\n    });\n\n    it('should be able to take in an array of methods', () => {\n      route = new Route({ path : '/a/b/c', methods : ['GET', 'POST'], handler : handler });\n      expect(route.methods).to.eql(['GET', 'POST']);\n    });\n\n    it('should normalize an array of methods', () => {\n      route = new Route({ path : '/a/b/c', methods : ['gET', 'POst'], handler : handler });\n      expect(route.methods).to.eql(['GET', 'POST']);\n    });\n\n    it('should default method to ALL', () => {\n      route = new Route({ path : '/a/b/c', handler : handler });\n      expect(route.methods).to.eql(['*']);\n    });\n\n    it('should default path to all', () => {\n      route = new Route({ handler : handler });\n      expect(route.path).to.equal('*all');\n    });\n\n    it('should extend with arbitrary parameters', () => {\n      route = new Route(_.extend({}, opts, { a : 1, b : 'AHHH' }));\n\n      expect(route.a).to.equal(1);\n      expect(route.b).to.equal('AHHH');\n    });\n\n    it('should not allow arbitrary parameters to overwrite internal state', () => {\n      route = new Route(_.extend({}, opts, { _path : 'okthen?' }));\n\n      expect(route.path).to.equal('/');\n    });\n  });\n\n  describe('isMatch', () => {\n    it('should throw if the input is not a request object', () => {\n      expect(() => {\n        route.isMatch({});\n      }).to.throw('First argument: request must be a SuperRouter Request instance.');\n    });\n\n    it('should return true if a request is an exact match for the route', () => {\n      const req = new Request({\n        method  : 'get',\n        path    : '/',\n        headers : {}\n      });\n\n      expect(route.isMatch(req)).to.be.true;\n    });\n\n    it('should return true for any method if the route is to match all methods', () => {\n      route = new Route({\n        method  : '*',\n        path    : '/',\n        handler : sinon.spy()\n      });\n\n      const req = new Request({\n        method  : 'get',\n        path    : '/',\n        headers : {}\n      });\n\n      expect(route.isMatch(req)).to.be.true;\n    });\n\n    it('should return true for any method if the route is to match all paths', () => {\n      route = new Route({\n        method  : 'get',\n        path    : '*all',\n        handler : sinon.spy()\n      });\n\n      const req = new Request({\n        method  : 'get',\n        path    : '/a/b/c',\n        headers : {}\n      });\n\n      expect(route.isMatch(req)).to.be.true;\n    });\n\n    it('should return false if a the method is wrong', () => {\n      const req = new Request({\n        method  : 'put',\n        path    : '/',\n        headers : {}\n      });\n\n      expect(route.isMatch(req)).to.be.false;\n    });\n\n    it('should return false if a the path is wrong', () => {\n      const req = new Request({\n        method  : 'get',\n        path    : '/a/b',\n        headers : {}\n      });\n\n      expect(route.isMatch(req)).to.be.false;\n    });\n  });\n\n  describe('#execute', () => {\n    let request;\n    let response;\n\n    it('should throw if options is not defined', () => {\n      expect(() => {\n        route.execute();\n      }).to.throw('options must be an object.');\n    });\n\n    it('should throw if options is not an object', () => {\n      expect(() => {\n        route.execute(7);\n      }).to.throw('options must be an object.');\n    });\n\n    it('should throw if the input is not a request object', () => {\n      expect(() => {\n        route.execute({});\n      }).to.throw('request must be a SuperRouter Request instance.');\n    });\n\n    it('should throw if the second input is not a response object', () => {\n      request = new Request({\n        method  : 'get',\n        path    : '/a/b',\n        headers : {}\n      });\n\n      expect(() => {\n        route.execute({ request });\n      }).to.throw('response must be a SuperRouter Response instance.');\n    });\n\n    describe('on non-match', () => {\n      beforeEach(() => {\n        request  = new Request({\n          method  : 'get',\n          path    : '/a/b',\n          headers : {}\n        });\n        response = new Response();\n      });\n\n      it('should return a promise', () => {\n        expect(Q.isPromise(route.execute({ request, response }))).to.be.true;\n      });\n\n      it('should resolve the promise without executing the handler', () => {\n        return route.execute({ request, response }).then(() => {\n          expect(handler).to.not.have.been.called;\n        });\n      });\n\n      it('should pass properties on options to handler', () => {\n        const opts = {\n          request : new Request({\n            method  : 'get',\n            path    : '/',\n            headers : {}\n          }),\n          response : new Response(),\n          a        : 1,\n          b        : 'thing'\n        };\n\n        return route.execute(opts).then(() => {\n          expect(handler).to.have.been.calledWith(opts);\n        });\n      });\n\n    });\n\n    describe('on match', () => {\n      beforeEach(() => {\n        request  = new Request({\n          method  : 'get',\n          path    : '/',\n          headers : {}\n        });\n        response = new Response();\n      });\n\n      it('should return a promise', () => {\n        expect(Q.isPromise(route.execute({ request, response }))).to.be.true;\n      });\n\n      it('should resolve the promise, executing the handler if the request is a match', () => {\n        return route.execute({ request, response }).then(() => {\n          expect(handler).to.have.been.calledOnce;\n        });\n      });\n\n      it('should pass the request and response to the handler', () => {\n        return route.execute({ request, response }).then(() => {\n          expect(handler).to.have.been.calledWith({ request, response });\n        });\n      });\n\n      it('should catch any thrown errors and reject the promise with them', () => {\n        const err = new Error('A TERRIBLE TRAGEDY');\n        handler.throws(err);\n\n        return route.execute({ request, response }).catch((thrownErr) => {\n          expect(thrownErr).to.equal(err);\n        });\n      });\n\n      it('should resolve with the return value if the handler does not return a promise', () => {\n        handler.returns('resolveVal');\n\n        return route.execute({ request, response }).then((res) => {\n          expect(res).to.equal('resolveVal');\n        });\n      });\n\n      it('should resolve if the handler resolves', () => {\n        handler.returnsPromise();\n        handler.resolves('resolveVal');\n\n        return route.execute({ request, response }).then((res) => {\n          expect(res).to.equal('resolveVal');\n        });\n      });\n\n      it('should reject if the handler rejects and there is no error handler', () => {\n        handler.returnsPromise();\n        const err = new Error('A TERRIBLE TRAGEDY');\n        handler.rejects(err);\n\n        return route.execute({ request, response }).catch((thrownErr) => {\n          expect(thrownErr).to.equal(err);\n        });\n      });\n\n      it('should propagate mutations on the request and response that occur within the handler', () => {\n        route = new Route({\n          path    : '/',\n          methods : 'get',\n          handler : (opts) => {\n            const req = opts.request;\n            const res = opts.response;\n\n            req.a = 1;\n            res.b = 2;\n          }\n        });\n\n        return route.execute({ request, response }).then(() => {\n          expect(request.a).to.equal(1);\n          expect(response.b).to.equal(2);\n        });\n      });\n\n      describe('route with an error handler', () => {\n        let errorHandler;\n\n        beforeEach(() => {\n          handler = sinon.spy();\n          errorHandler = sinon.spy();\n          opts    = { path : '/', methods : 'GET', handler : handler, errorHandler : errorHandler };\n          route   = new Route(opts);\n        });\n\n        it('if the handler does not throw then error handler should not be run', () => {\n          return route.execute({ request, response }).then(() => {\n            expect(errorHandler).to.not.have.been.called;\n          });\n\n        });\n\n        it('if the handler resolves then error handler should not be run', () => {\n          handler = sinon.stub().returnsPromise().resolves();\n\n          return route.execute({ request, response }).then(() => {\n            expect(errorHandler).to.not.have.been.called;\n          });\n\n        });\n\n        it('if the handler throws then error handler should be run', () => {\n          const err = new Error('A TERRIBLE TRAGEDY');\n          handler = sinon.stub().throws(err);\n          route = new Route({\n            handler      : handler,\n            errorHandler : errorHandler\n          });\n\n          return route.execute({ request, response }).then(() => {\n            expect(errorHandler).to.have.been.calledOnce;\n          });\n\n        });\n\n        it('should pass request, response, error to the error handler', () => {\n          const err = new Error('A TERRIBLE TRAGEDY');\n          handler = sinon.stub().throws(err);\n          route = new Route({\n            handler      : handler,\n            errorHandler : errorHandler\n          });\n\n          return route.execute({ request, response }).then(() => {\n            expect(errorHandler).to.have.been.calledWith({ request, response, error : err });\n          });\n        });\n\n        it('should resolve if the handler rejects and the error handler resolves', () => {\n          const err = new Error('A TERRIBLE TRAGEDY');\n          handler = sinon.stub().throws(err);\n          const success = 'YAY';\n          errorHandler = sinon.stub();\n          errorHandler.returnsPromise().resolves(success);\n          route = new Route({\n            handler      : handler,\n            errorHandler : errorHandler\n          });\n\n          return route.execute({ request, response }).then((result) => {\n            expect(result).to.equal(success);\n          });\n        });\n\n        it('should reject if the handler rejects and the error handler rejects', () => {\n          const err = new Error('A TERRIBLE TRAGEDY');\n          handler = sinon.stub().throws(err);\n\n          const err2 = new Error('ANOTHER TERRIBLE TRAGEDY');\n          errorHandler = sinon.stub().throws(err2);\n\n          return route.execute({ request, response }).catch((thrownErr) => {\n            expect(thrownErr).to.equal(err2);\n          });\n        });\n      });\n\n      describe('routeParams', () => {\n        beforeEach(() => {\n          route = new Route({\n            path    : '/user(/:type)/:id(/*rest)',\n            methods : 'get',\n            handler : sinon.spy()\n          });\n        });\n\n        it('should create a routeParams property on the request', () => {\n          request = new Request({\n            path    : '/',\n            method  : 'get',\n            headers : {}\n          });\n          route.execute({ request, response });\n          expect(request.routeParams).to.exist;\n          expect(request.routeParams).to.eql({});\n        });\n\n        it('should overwrite an existing routeParams property', () => {\n          request             = new Request({\n            path    : '/',\n            method  : 'get',\n            headers : {}\n          });\n          request.routeParams = { a : 1 };\n          route.execute({ request, response });\n          expect(request.routeParams).to.exist;\n          expect(request.routeParams).to.eql({});\n        });\n\n        it('should represent each match from the route path on the routeParams property', () => {\n          request = new Request({\n            path    : '/user/red/17/a/b/c',\n            method  : 'get',\n            headers : {}\n          });\n          route.execute({ request, response });\n          expect(request.routeParams).to.exist;\n          expect(request.routeParams).to.eql({\n            type : 'red',\n            id   : '17',\n            rest : 'a/b/c'\n          });\n        });\n      });\n    });\n  });\n});\n"
  },
  {
    "__docId__": 362,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe148",
    "testId": 148,
    "memberof": "test/Route.test.js",
    "testDepth": 0,
    "longname": "test/Route.test.js~describe148",
    "access": null,
    "description": "A Route",
    "lineNumber": 20
  },
  {
    "__docId__": 363,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe149",
    "testId": 149,
    "memberof": "test/Route.test.js~describe148",
    "testDepth": 1,
    "longname": "test/Route.test.js~describe148.describe149",
    "access": null,
    "description": "constructor",
    "lineNumber": 31
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it150",
    "testId": 150,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it150",
    "access": null,
    "description": "should throw if options is undefined",
    "lineNumber": 38
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it151",
    "testId": 151,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it151",
    "access": null,
    "description": "should throw if options is not an object",
    "lineNumber": 44
  },
  {
    "__docId__": 366,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it152",
    "testId": 152,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it152",
    "access": null,
    "description": "should throw if handler is not defined;",
    "lineNumber": 50
  },
  {
    "__docId__": 367,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it153",
    "testId": 153,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it153",
    "access": null,
    "description": "should throw if handler is not a function",
    "lineNumber": 56
  },
  {
    "__docId__": 368,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it154",
    "testId": 154,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it154",
    "access": null,
    "description": "should throw if error handler is provided but not a function",
    "lineNumber": 62
  },
  {
    "__docId__": 369,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it155",
    "testId": 155,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it155",
    "access": null,
    "description": "should not throw if error handler is not provided",
    "lineNumber": 68
  },
  {
    "__docId__": 370,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it156",
    "testId": 156,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it156",
    "access": null,
    "description": "should not throw if options.path is undefined",
    "lineNumber": 74
  },
  {
    "__docId__": 371,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it157",
    "testId": 157,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it157",
    "access": null,
    "description": "should throw if options.path is not a string",
    "lineNumber": 80
  },
  {
    "__docId__": 372,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it158",
    "testId": 158,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it158",
    "access": null,
    "description": "should not throw if options.methods is undefined",
    "lineNumber": 86
  },
  {
    "__docId__": 373,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it159",
    "testId": 159,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it159",
    "access": null,
    "description": "should throw if options.methods is not a string",
    "lineNumber": 92
  },
  {
    "__docId__": 374,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it160",
    "testId": 160,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it160",
    "access": null,
    "description": "should throw if options.methods is not an allowed method value",
    "lineNumber": 98
  },
  {
    "__docId__": 375,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it161",
    "testId": 161,
    "memberof": "test/Route.test.js~describe148.describe149",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe149.it161",
    "access": null,
    "description": "should throw if options.methods contains a method value in the array that is not allowed",
    "lineNumber": 104
  },
  {
    "__docId__": 376,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe162",
    "testId": 162,
    "memberof": "test/Route.test.js~describe148",
    "testDepth": 1,
    "longname": "test/Route.test.js~describe148.describe162",
    "access": null,
    "description": "properties",
    "lineNumber": 112
  },
  {
    "__docId__": 377,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it163",
    "testId": 163,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it163",
    "access": null,
    "lineNumber": 114
  },
  {
    "__docId__": 378,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it164",
    "testId": 164,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it164",
    "access": null,
    "lineNumber": 131
  },
  {
    "__docId__": 379,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it165",
    "testId": 165,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it165",
    "access": null,
    "description": "should normalize root path",
    "lineNumber": 138
  },
  {
    "__docId__": 380,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it166",
    "testId": 166,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it166",
    "access": null,
    "description": "should normalize trailing slashes",
    "lineNumber": 143
  },
  {
    "__docId__": 381,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it167",
    "testId": 167,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it167",
    "access": null,
    "description": "should normalize trailing slashes",
    "lineNumber": 148
  },
  {
    "__docId__": 382,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it168",
    "testId": 168,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it168",
    "access": null,
    "description": "should lowercase path parts that are NOT route params",
    "lineNumber": 153
  },
  {
    "__docId__": 383,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it169",
    "testId": 169,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it169",
    "access": null,
    "description": "should normalize method name",
    "lineNumber": 158
  },
  {
    "__docId__": 384,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it170",
    "testId": 170,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it170",
    "access": null,
    "description": "should turn a single method into an array",
    "lineNumber": 163
  },
  {
    "__docId__": 385,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it171",
    "testId": 171,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it171",
    "access": null,
    "description": "should be able to take in an array of methods",
    "lineNumber": 168
  },
  {
    "__docId__": 386,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it172",
    "testId": 172,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it172",
    "access": null,
    "description": "should normalize an array of methods",
    "lineNumber": 173
  },
  {
    "__docId__": 387,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it173",
    "testId": 173,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it173",
    "access": null,
    "description": "should default method to ALL",
    "lineNumber": 178
  },
  {
    "__docId__": 388,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it174",
    "testId": 174,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it174",
    "access": null,
    "description": "should default path to all",
    "lineNumber": 183
  },
  {
    "__docId__": 389,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it175",
    "testId": 175,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it175",
    "access": null,
    "description": "should extend with arbitrary parameters",
    "lineNumber": 188
  },
  {
    "__docId__": 390,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it176",
    "testId": 176,
    "memberof": "test/Route.test.js~describe148.describe162",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe162.it176",
    "access": null,
    "description": "should not allow arbitrary parameters to overwrite internal state",
    "lineNumber": 195
  },
  {
    "__docId__": 391,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe177",
    "testId": 177,
    "memberof": "test/Route.test.js~describe148",
    "testDepth": 1,
    "longname": "test/Route.test.js~describe148.describe177",
    "access": null,
    "description": "isMatch",
    "lineNumber": 202
  },
  {
    "__docId__": 392,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it178",
    "testId": 178,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it178",
    "access": null,
    "description": "should throw if the input is not a request object",
    "lineNumber": 203
  },
  {
    "__docId__": 393,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it179",
    "testId": 179,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it179",
    "access": null,
    "description": "should return true if a request is an exact match for the route",
    "lineNumber": 209
  },
  {
    "__docId__": 394,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it180",
    "testId": 180,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it180",
    "access": null,
    "description": "should return true for any method if the route is to match all methods",
    "lineNumber": 219
  },
  {
    "__docId__": 395,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it181",
    "testId": 181,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it181",
    "access": null,
    "description": "should return true for any method if the route is to match all paths",
    "lineNumber": 235
  },
  {
    "__docId__": 396,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it182",
    "testId": 182,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it182",
    "access": null,
    "description": "should return false if a the method is wrong",
    "lineNumber": 251
  },
  {
    "__docId__": 397,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it183",
    "testId": 183,
    "memberof": "test/Route.test.js~describe148.describe177",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe177.it183",
    "access": null,
    "description": "should return false if a the path is wrong",
    "lineNumber": 261
  },
  {
    "__docId__": 398,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe184",
    "testId": 184,
    "memberof": "test/Route.test.js~describe148",
    "testDepth": 1,
    "longname": "test/Route.test.js~describe148.describe184",
    "access": null,
    "description": "#execute",
    "lineNumber": 272
  },
  {
    "__docId__": 399,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it185",
    "testId": 185,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.it185",
    "access": null,
    "description": "should throw if options is not defined",
    "lineNumber": 276
  },
  {
    "__docId__": 400,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it186",
    "testId": 186,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.it186",
    "access": null,
    "description": "should throw if options is not an object",
    "lineNumber": 282
  },
  {
    "__docId__": 401,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it187",
    "testId": 187,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.it187",
    "access": null,
    "description": "should throw if the input is not a request object",
    "lineNumber": 288
  },
  {
    "__docId__": 402,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it188",
    "testId": 188,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.it188",
    "access": null,
    "description": "should throw if the second input is not a response object",
    "lineNumber": 294
  },
  {
    "__docId__": 403,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe189",
    "testId": 189,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.describe189",
    "access": null,
    "description": "on non-match",
    "lineNumber": 306
  },
  {
    "__docId__": 404,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it190",
    "testId": 190,
    "memberof": "test/Route.test.js~describe148.describe184.describe189",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe189.it190",
    "access": null,
    "description": "should return a promise",
    "lineNumber": 316
  },
  {
    "__docId__": 405,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it191",
    "testId": 191,
    "memberof": "test/Route.test.js~describe148.describe184.describe189",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe189.it191",
    "access": null,
    "description": "should resolve the promise without executing the handler",
    "lineNumber": 320
  },
  {
    "__docId__": 406,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it192",
    "testId": 192,
    "memberof": "test/Route.test.js~describe148.describe184.describe189",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe189.it192",
    "access": null,
    "description": "should pass properties on options to handler",
    "lineNumber": 326
  },
  {
    "__docId__": 407,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe193",
    "testId": 193,
    "memberof": "test/Route.test.js~describe148.describe184",
    "testDepth": 2,
    "longname": "test/Route.test.js~describe148.describe184.describe193",
    "access": null,
    "description": "on match",
    "lineNumber": 345
  },
  {
    "__docId__": 408,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it194",
    "testId": 194,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it194",
    "access": null,
    "description": "should return a promise",
    "lineNumber": 355
  },
  {
    "__docId__": 409,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it195",
    "testId": 195,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it195",
    "access": null,
    "description": "should resolve the promise, executing the handler if the request is a match",
    "lineNumber": 359
  },
  {
    "__docId__": 410,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it196",
    "testId": 196,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it196",
    "access": null,
    "description": "should pass the request and response to the handler",
    "lineNumber": 365
  },
  {
    "__docId__": 411,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it197",
    "testId": 197,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it197",
    "access": null,
    "description": "should catch any thrown errors and reject the promise with them",
    "lineNumber": 371
  },
  {
    "__docId__": 412,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it198",
    "testId": 198,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it198",
    "access": null,
    "description": "should resolve with the return value if the handler does not return a promise",
    "lineNumber": 380
  },
  {
    "__docId__": 413,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it199",
    "testId": 199,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it199",
    "access": null,
    "description": "should resolve if the handler resolves",
    "lineNumber": 388
  },
  {
    "__docId__": 414,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it200",
    "testId": 200,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it200",
    "access": null,
    "description": "should reject if the handler rejects and there is no error handler",
    "lineNumber": 397
  },
  {
    "__docId__": 415,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it201",
    "testId": 201,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.it201",
    "access": null,
    "description": "should propagate mutations on the request and response that occur within the handler",
    "lineNumber": 407
  },
  {
    "__docId__": 416,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe202",
    "testId": 202,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "access": null,
    "description": "route with an error handler",
    "lineNumber": 426
  },
  {
    "__docId__": 417,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it203",
    "testId": 203,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it203",
    "access": null,
    "description": "if the handler does not throw then error handler should not be run",
    "lineNumber": 436
  },
  {
    "__docId__": 418,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it204",
    "testId": 204,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it204",
    "access": null,
    "description": "if the handler resolves then error handler should not be run",
    "lineNumber": 443
  },
  {
    "__docId__": 419,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it205",
    "testId": 205,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it205",
    "access": null,
    "description": "if the handler throws then error handler should be run",
    "lineNumber": 452
  },
  {
    "__docId__": 420,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it206",
    "testId": 206,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it206",
    "access": null,
    "description": "should pass request, response, error to the error handler",
    "lineNumber": 466
  },
  {
    "__docId__": 421,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it207",
    "testId": 207,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it207",
    "access": null,
    "description": "should resolve if the handler rejects and the error handler resolves",
    "lineNumber": 479
  },
  {
    "__docId__": 422,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it208",
    "testId": 208,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe202",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe202.it208",
    "access": null,
    "description": "should reject if the handler rejects and the error handler rejects",
    "lineNumber": 495
  },
  {
    "__docId__": 423,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe209",
    "testId": 209,
    "memberof": "test/Route.test.js~describe148.describe184.describe193",
    "testDepth": 3,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe209",
    "access": null,
    "description": "routeParams",
    "lineNumber": 508
  },
  {
    "__docId__": 424,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it210",
    "testId": 210,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe209",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe209.it210",
    "access": null,
    "description": "should create a routeParams property on the request",
    "lineNumber": 517
  },
  {
    "__docId__": 425,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it211",
    "testId": 211,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe209",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe209.it211",
    "access": null,
    "description": "should overwrite an existing routeParams property",
    "lineNumber": 528
  },
  {
    "__docId__": 426,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it212",
    "testId": 212,
    "memberof": "test/Route.test.js~describe148.describe184.describe193.describe209",
    "testDepth": 4,
    "longname": "test/Route.test.js~describe148.describe184.describe193.describe209.it212",
    "access": null,
    "description": "should represent each match from the route path on the routeParams property",
    "lineNumber": 540
  },
  {
    "__docId__": 427,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/Router.test.js",
    "memberof": null,
    "longname": "test/Router.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nconst chai              = require('chai');\nconst sinon             = require('sinon');\nconst sinonChai         = require('sinon-chai');\nconst sinonStubPromises = require('sinon-promises');\nconst chaiAsPromised    = require('chai-as-promised');\nconst proxyquire        = require('proxyquire');\n\nsinonStubPromises(sinon);\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nconst expect  = chai.expect;\nconst sandbox = sinon.sandbox.create();\n\nconst Route    = require('../lib/Route');\nconst Request  = require('../lib/Request');\nconst Response = require('../lib/Response');\n\nlet Router;\nlet router;\nlet mockTree;\nlet request;\nlet response;\n\ndescribe('Router ', () => {\n  beforeEach(() => {\n    delete require.cache[require.resolve('../lib/Router')];\n\n    const RouteTree = require('../lib/RouteTree');\n    mockTree        = sinon.createStubInstance(RouteTree);\n\n    Router = proxyquire('../lib/Router', {\n      './RouteTree' : sinon.stub().returns(mockTree)\n    });\n    router = new Router();\n  });\n\n  afterEach(() => {\n    sandbox.restore();\n  });\n\n  describe('#addRoute', () => {\n    it('should construct a new Route object from the input', () => {\n      const mockRoute = sinon.stub();\n      mockRoute.returns({\n        path : ''\n      });\n      Router          = proxyquire('../lib/Router', {\n        './Route'     : mockRoute,\n        './RouteTree' : sinon.stub().returns(mockTree)\n      });\n\n      const opts = {};\n      router     = new Router();\n      router.addRoute(opts);\n      expect(mockRoute).to.have.been.calledOnce;\n      expect(mockRoute).to.have.been.calledWithNew;\n      expect(mockRoute).to.have.been.calledWith(opts);\n    });\n\n    it('should add the new route to its tree', () => {\n      const route = new Route({\n        path    : '/',\n        methods : 'get',\n        handler : sinon.spy()\n      });\n      router.addRoute(route);\n\n      expect(mockTree.addRoute).to.have.been.calledOnce;\n      expect(mockTree.addRoute).to.have.been.calledWith(route);\n    });\n\n    it('should throw an error if the route contains a splat', () => {\n      expect(() => {\n        router.addRoute({\n          path    : '/*start/foo',\n          methods : 'get',\n          handler : sinon.spy()\n        });\n      }).to.throw('Splats and optional groups are not supported for routes.');\n    });\n\n    it('should throw an error if the route contains an optional', () => {\n      expect(() => {\n        router.addRoute({\n          path    : '(/start)/foo',\n          methods : 'get',\n          handler : sinon.spy()\n        });\n      }).to.throw('Splats and optional groups are not supported for routes.');\n    });\n  });\n\n  describe('middleware', () => {\n    beforeEach(() => {\n      router = new Router();\n\n      router.addRoute({\n        path    : '/',\n        methods : 'get',\n        handler : sinon.spy()\n      });\n\n      router.addRoute({\n        path    : '/user/:id',\n        methods : 'post',\n        handler : sinon.spy()\n      });\n\n      router.addRoute({\n        path    : '/user/:id',\n        methods : 'get',\n        handler : sinon.spy()\n      });\n\n      request = new Request({\n        path    : '/',\n        method  : 'get',\n        headers : {}\n      });\n\n      response = new Response();\n    });\n\n    describe('#match', () => {\n      it('should find the route on its routeTree', () => {\n        mockTree.find.returns({});\n        router.match({ request });\n\n        expect(mockTree.find).to.have.been.calledOnce;\n        expect(mockTree.find).to.have.been.calledWith(request);\n      });\n\n      it('should attach the matched route info to the request', () => {\n        const route = new Route({\n          path    : '/',\n          methods : 'get',\n          handler : sinon.spy()\n        });\n\n        mockTree.find.returns(route);\n\n        router.match({ request });\n        expect(request.matchedRoute).to.equal(route);\n      });\n\n      it('should throw an error if there is not matched route', () => {\n        mockTree.find.returns(undefined);\n        expect(() => {\n          router.match({ request });\n        }).to.throw('No route matched');\n\n      });\n    });\n\n    describe('#execute', () => {\n      it('should invoke execute on the matched route, if it exists', () => {\n        const route = new Route({\n          path    : '/',\n          methods : 'get',\n          handler : sinon.spy()\n        });\n        sinon.spy(route, 'execute');\n\n        request.matchedRoute = route;\n        router.execute({ request, response });\n\n        expect(route.execute).to.have.been.calledOnce;\n        expect(route.execute).to.have.been.calledWith({ request, response });\n      });\n\n      it('should not throw if the matched route doesnt exist', () => {\n        expect(() => {\n          router.execute({ request, response });\n        }).to.not.throw();\n      });\n    });\n  });\n});\n"
  },
  {
    "__docId__": 428,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe213",
    "testId": 213,
    "memberof": "test/Router.test.js",
    "testDepth": 0,
    "longname": "test/Router.test.js~describe213",
    "access": null,
    "description": "Router ",
    "lineNumber": 26
  },
  {
    "__docId__": 429,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe214",
    "testId": 214,
    "memberof": "test/Router.test.js~describe213",
    "testDepth": 1,
    "longname": "test/Router.test.js~describe213.describe214",
    "access": null,
    "description": "#addRoute",
    "lineNumber": 43
  },
  {
    "__docId__": 430,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it215",
    "testId": 215,
    "memberof": "test/Router.test.js~describe213.describe214",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe214.it215",
    "access": null,
    "description": "should construct a new Route object from the input",
    "lineNumber": 44
  },
  {
    "__docId__": 431,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it216",
    "testId": 216,
    "memberof": "test/Router.test.js~describe213.describe214",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe214.it216",
    "access": null,
    "description": "should add the new route to its tree",
    "lineNumber": 62
  },
  {
    "__docId__": 432,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it217",
    "testId": 217,
    "memberof": "test/Router.test.js~describe213.describe214",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe214.it217",
    "access": null,
    "description": "should throw an error if the route contains a splat",
    "lineNumber": 74
  },
  {
    "__docId__": 433,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it218",
    "testId": 218,
    "memberof": "test/Router.test.js~describe213.describe214",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe214.it218",
    "access": null,
    "description": "should throw an error if the route contains an optional",
    "lineNumber": 84
  },
  {
    "__docId__": 434,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe219",
    "testId": 219,
    "memberof": "test/Router.test.js~describe213",
    "testDepth": 1,
    "longname": "test/Router.test.js~describe213.describe219",
    "access": null,
    "description": "middleware",
    "lineNumber": 95
  },
  {
    "__docId__": 435,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe220",
    "testId": 220,
    "memberof": "test/Router.test.js~describe213.describe219",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe219.describe220",
    "access": null,
    "description": "#match",
    "lineNumber": 126
  },
  {
    "__docId__": 436,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it221",
    "testId": 221,
    "memberof": "test/Router.test.js~describe213.describe219.describe220",
    "testDepth": 3,
    "longname": "test/Router.test.js~describe213.describe219.describe220.it221",
    "access": null,
    "description": "should find the route on its routeTree",
    "lineNumber": 127
  },
  {
    "__docId__": 437,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it222",
    "testId": 222,
    "memberof": "test/Router.test.js~describe213.describe219.describe220",
    "testDepth": 3,
    "longname": "test/Router.test.js~describe213.describe219.describe220.it222",
    "access": null,
    "description": "should attach the matched route info to the request",
    "lineNumber": 135
  },
  {
    "__docId__": 438,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it223",
    "testId": 223,
    "memberof": "test/Router.test.js~describe213.describe219.describe220",
    "testDepth": 3,
    "longname": "test/Router.test.js~describe213.describe219.describe220.it223",
    "access": null,
    "description": "should throw an error if there is not matched route",
    "lineNumber": 148
  },
  {
    "__docId__": 439,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe224",
    "testId": 224,
    "memberof": "test/Router.test.js~describe213.describe219",
    "testDepth": 2,
    "longname": "test/Router.test.js~describe213.describe219.describe224",
    "access": null,
    "description": "#execute",
    "lineNumber": 157
  },
  {
    "__docId__": 440,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it225",
    "testId": 225,
    "memberof": "test/Router.test.js~describe213.describe219.describe224",
    "testDepth": 3,
    "longname": "test/Router.test.js~describe213.describe219.describe224.it225",
    "access": null,
    "description": "should invoke execute on the matched route, if it exists",
    "lineNumber": 158
  },
  {
    "__docId__": 441,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it226",
    "testId": 226,
    "memberof": "test/Router.test.js~describe213.describe219.describe224",
    "testDepth": 3,
    "longname": "test/Router.test.js~describe213.describe219.describe224.it226",
    "access": null,
    "description": "should not throw if the matched route doesnt exist",
    "lineNumber": 173
  }
]